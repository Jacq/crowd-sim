{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/CrowdSim.js","src/Engine.js","src/Entity.js","src/World.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CrowdSim.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* global window,module, exports : true, define */\r\n\r\nmodule.exports = CrowdSim;\r\n\r\nvar CrowdSim = module.exports =  {\r\n  Entity: require('./Entity'),\r\n  World: require('./World'),\r\n  Engine: require('./Engine')\r\n};\r\n\r\n// browser\r\nif (typeof window === 'object' && typeof window.document === 'object') {\r\n  window.CrowdSim = CrowdSim;\r\n}\r\n","\r\nvar Engine = {\r\n  running: false,\r\n  iterations: 0,\r\n  STEP: 60,\r\n  world: {}\r\n};\r\n\r\nEngine.setWorld = function(world) {\r\n  this.world = world;\r\n};\r\n\r\nEngine.getWorld = function() {\r\n  return this.world;\r\n};\r\n\r\nEngine.init = function(world, options) {\r\n  //this.entitiesSave = JSON.parse(JSON.stringify(world.entities));\r\n  this.world = world;\r\n  this.world.save();\r\n  this.options = options;\r\n  return this.world;\r\n};\r\n\r\nEngine.run = function() {\r\n  if (this.running) {\r\n    return;\r\n  }\r\n  this.running = true;\r\n  this._step();\r\n};\r\n\r\nEngine.step = function() {\r\n  if (this.running) {\r\n    return;\r\n  }\r\n  this._step();\r\n};\r\n\r\nEngine._step = function() {\r\n  if (this.world && this.world.entities) {\r\n    for (var i in this.world.entities) {\r\n      var entity = this.world.entities[i];\r\n      if (entity.selected) {\r\n        this.world.entitySelected = entity;\r\n        continue;\r\n      }\r\n      entity.acceleration.x = (Math.random() - 0.5) / 1000;\r\n      entity.acceleration.y = (Math.random() - 0.5) / 1000;\r\n      entity.velocity.x += entity.acceleration.x * Engine.STEP;\r\n      entity.velocity.y += entity.acceleration.y * Engine.STEP;\r\n      entity.direction = Math.atan2(entity.velocity.y, entity.velocity.x);\r\n      entity.position.x += entity.velocity.x * Engine.STEP;\r\n      entity.position.y += entity.velocity.y * Engine.STEP;\r\n\r\n      if (this.world.wrap) {\r\n        if (entity.position.x > this.world.MAX_X) {\r\n          entity.position.x = this.world.MIN_X + entity.position.x - this.world.MAX_X;\r\n        }\r\n        if (entity.position.x < this.world.MIN_X) {\r\n          entity.position.x = this.world.MAX_X - (this.world.MIN_X - entity.position.x);\r\n        }\r\n        if (entity.position.y > this.world.MAX_Y) {\r\n          entity.position.y = this.world.MIN_Y + entity.position.y - this.world.MAX_Y;\r\n        }\r\n        if (entity.position.y < this.world.MIN_Y) {\r\n          entity.position.y = this.world.MAX_Y - (this.world.MIN_Y - entity.position.y);\r\n        }\r\n      }\r\n      if (this.options.onStep) {\r\n        this.options.onStep(this);\r\n      }\r\n    }\r\n  }\r\n  this.iterations++;\r\n  if (this.running) {\r\n    var that = this;\r\n    setTimeout(function() {\r\n      that._step();\r\n    }, this.STEP);\r\n  }\r\n};\r\n\r\nEngine.stop = function() {\r\n  if (!this.running) {\r\n    return;\r\n  }\r\n  this.running = false;\r\n};\r\nEngine.reset = function() {\r\n  this.iterations = 0;\r\n  this.running = false;\r\n  this.world.restore();\r\n};\r\n\r\nmodule.exports = Engine;\r\n","/* global window,module, exports : true, define */\r\n\r\nEntity = function(id, x, y, size, direction) {\r\n  this.id = id;\r\n  this.position = {\r\n    x: x,\r\n    y: y\r\n  };\r\n  this.velocity = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n  this.acceleration = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n  this.size = size;\r\n  this.direction = direction;\r\n  this.view = {};\r\n};\r\n\r\nmodule.exports = Entity;\r\n","/* global window,module, exports : true, define */\r\n\r\nWorld = function(w, h) {\r\n  this.entities = [];\r\n  this.wrap = true;\r\n  this.MAX_X = w;\r\n  this.MIN_X = 0;\r\n  this.MAX_Y = h;\r\n  this.MIN_Y = 0;\r\n};\r\n\r\nWorld.prototype.add = function(entity) {\r\n  this.entities.push(entity);\r\n};\r\nWorld.prototype.save = function() {\r\n  this.entitiesSave = JSON.stringify(this.entities);\r\n};\r\nWorld.prototype.restore = function() {\r\n  this.entities = JSON.parse(this.entitiesSave);\r\n};\r\n\r\nmodule.exports = World;\r\n"]}
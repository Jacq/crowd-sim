{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/Behavior/Behavior.js","src/Behavior/Panic.js","src/Common/Vec2.js","src/CrowdSim.js","src/Engine.js","src/Entities/Agent.js","src/Entities/Context.js","src/Entities/Entity.js","src/Entities/Group.js","src/Entities/Joint.js","src/Entities/Path.js","src/Entities/Wall.js","src/Render/Agent.js","src/Render/Base.js","src/Render/Context.js","src/Render/Detail.js","src/Render/Entity.js","src/Render/Group.js","src/Render/Joint.js","src/Render/Path.js","src/Render/Render.js","src/Render/Wall.js","src/World.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjjlmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACntEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrvfile":"CrowdSim.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\n/**\n *\n *\n * @param  {World} world [description]\n * @param  {Object} options [description]\n * {Vec2}       [description]\n */\nvar Behavior = function(world) {\n  this.world = world;\n};\n\n// path point, point, other agent {point , radius}\nBehavior.prototype.getAccel = function(agent, target) {};\n\nmodule.exports = Behavior;\n","'use strict';\n\nvar Vec2 = require('../Common/Vec2');\nvar Behavior = require('./Behavior');\n\n/**\n * Helbing-Farkas,Vicsek Simulating dynamical features of escape panic\n *\n * @param  {World} world [description]\n * @param  {Object} options [description]\n * {Vec2}       [description]\n */\nvar Panic = function(world, options) {\n  Behavior.call(this, world);\n  this.options = Lazy(options).defaults(Panic.defaults).toObject();\n};\n\n// path point, point, other agent {point , radius}\nPanic.prototype.getAccel = function(agent, target) {\n  Behavior.prototype.getAccel.call(this, agent, target);\n  var desiredForce = Vec2.create();\n  var agentsForce = Vec2.create();\n  var wallsForce = Vec2.create();\n  var accel = Vec2.create();\n  var distanceToTarget;\n\n  // check agent desired force\n  Vec2.add(accel, agentsForce, wallsForce);\n  if (target) { // agent is going somewhere?\n    distanceToTarget = Vec2.distance(agent.pos, target.pos);\n    if (distanceToTarget > target.getRadius()) {\n      Vec2.subtract(desiredForce, target.pos, agent.pos);\n      if (Vec2.length(desiredForce) > agent.maxAccel) {\n        Vec2.normalizeAndScale(desiredForce, desiredForce, agent.maxAccel * agent.mass);\n      }\n    }\n  }\n\n  // check other agents interaction\n  var neighbours = this.world.getNeighbours(agent);\n  if (neighbours.length) {\n    for (var n in neighbours) {\n      var neighbour = neighbours[n];\n      if (neighbour !== agent) {\n        var neighbourToAgentForce = this.calculateAgentForce(agent, neighbour);\n        Vec2.add(agentsForce, agentsForce, neighbourToAgentForce);\n      }\n    }\n  }\n\n  // check walls interaction\n  var walls = this.world.getNearWalls(agent);\n  if (walls.length > 0) {\n    for (var w in walls) { // check all walls\n      var wall = walls[w];\n      for (var s = 0; s < wall.getCorners().length - 1; s++) { // check each segment of wall\n        var projection = wall.getProjection(agent.pos, s);\n        var wallsToAgentForce = this.calculateWallForce(agent, projection, wall.getWidth());\n        Vec2.add(wallsForce, wallsForce, wallsToAgentForce);\n      }\n    }\n  }\n\n  // fix to stay in place if no target is selected or already at target\n  if (!target || distanceToTarget < target.radius) {\n    Vec2.negate(desiredForce, agent.vel);\n    Vec2.scale(desiredForce, desiredForce, this.options.relaxationTime);\n    if (Vec2.length(desiredForce) > agent.maxAccel) {\n      Vec2.normalizeAndScale(desiredForce, desiredForce, agent.maxAccel);\n    }\n  }\n\n  Vec2.add3(accel, desiredForce, agentsForce, wallsForce);\n  // return desiredForce + agentsForce + wallsForce;\n  if (agent.debug) {\n    if (isNaN(desiredForce[0]) || isNaN(agentsForce[0]) || isNaN(wallsForce[0]) ||\n        isNaN(desiredForce[1]) || isNaN(agentsForce[1]) || isNaN(wallsForce[1])) {\n      throw 'One of the forces is a NaN!';\n    }\n    agent.debug.forces = {\n      desired: desiredForce,\n      agents: agentsForce,\n      walls: wallsForce\n    };\n  }\n  //console.log(Vec2.str(desiredForce) + '|' + Vec2.str(agentsForce) + '|' + Vec2.str(wallsForce));\n  return accel;\n};\n\nPanic.prototype.calculateAgentForce = function(i, j) {\n  var interactionForce = Vec2.create();\n  var rij = i.size + j.size;\n  var dij = Vec2.distance(i.pos, j.pos);\n  // ij direction\n  var nijV2 = Vec2.create();\n  Vec2.subtract(nijV2, i.pos, j.pos);\n  Vec2.scale(nijV2, nijV2, 1 / dij);\n  // ij tangencial direction\n  var tijV2 = Vec2.fromValues(-nijV2[1], nijV2[0]);\n\n  var rdij = rij - dij;\n  Vec2.scale(interactionForce, nijV2, this.options.A * Math.exp(rdij / this.options.B));\n\n  if (rdij > 0) { // agents touch each other\n    // ij tangencial velocity\n    Vec2.scaleAndAdd(interactionForce, interactionForce, nijV2, this.options.kn * rdij); // body force\n    // sliding friction\n    var vjiV2 = Vec2.create();\n    Vec2.subtract(vjiV2, j.vel, i.vel);\n    var deltaVji = Vec2.dot(vjiV2, tijV2);\n    Vec2.scaleAndAdd(interactionForce, interactionForce, tijV2, this.options.Kv * rdij * deltaVji);\n  }\n  return interactionForce;\n};\n\nPanic.prototype.calculateWallForce = function(i, projection, width) {\n  var interactionForce = Vec2.create();\n  var rij = i.size + width;\n  // ij direction\n  var nijV2 = projection;\n  var dij = Vec2.length(projection);\n  Vec2.scale(nijV2, nijV2, 1 / dij);\n  // ij tangencial direction\n  var tijV2 = Vec2.fromValues(-nijV2[1], nijV2[0]);\n\n  var rdij = rij - dij;\n  Vec2.scale(interactionForce, nijV2, this.options.A * Math.exp(rdij / this.options.B));\n  if (rdij > 0) { // agents touch each other\n    // ij tangencial velocity\n    var vjiV2 = Vec2.create();\n    var dotViT = Vec2.dot(i.vel, tijV2);\n    Vec2.scaleAndAdd(interactionForce, interactionForce, nijV2, this.options.kn * rdij); // body force\n    Vec2.scaleAndAdd(interactionForce, interactionForce, tijV2, -this.options.Kv * rdij * dotViT);\n  }\n  return interactionForce;\n};\n\nPanic.defaults = {\n  A: 2e3, // N\n  B: 0.08, // m\n  kn: 1.2e5, // kg s-2\n  Kv: 2.4e5, //kg m-1 s-1\n  relaxationTime: 0.3\n};\nmodule.exports = Panic;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\n/**\r\n * @class Common utilities\r\n * @name glMatrix\r\n */\r\nvar glMatrix = {};\r\n\r\n// Constants\r\nglMatrix.EPSILON = 0.000001;\r\nglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\r\nglMatrix.RANDOM = Math.random;\r\nglMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE !== Array) && ('SIMD' in this);\r\nglMatrix.ENABLE_SIMD = false;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nglMatrix.setMatrixArrayType = function(type) {\r\n    glMatrix.ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n* Convert Degree To Radian\r\n*\r\n* @param {Number} Angle in Degrees\r\n*/\r\nglMatrix.toRadian = function(a){\r\n     return a * degree;\r\n}\r\n\r\n/**\r\n * @class 2 Dimensional Vector\r\n * @name vec2\r\n */\r\nvar vec2 = {};\r\n\r\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\r\nvec2.create = function() {\r\n    var out = new glMatrix.ARRAY_TYPE(2);\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    return out;\r\n};\r\n\r\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\r\nvec2.clone = function(a) {\r\n    var out = new glMatrix.ARRAY_TYPE(2);\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\r\nvec2.fromValues = function(x, y) {\r\n    var out = new glMatrix.ARRAY_TYPE(2);\r\n    out[0] = x;\r\n    out[1] = y;\r\n    return out;\r\n};\r\n\r\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\r\nvec2.copy = function(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\r\nvec2.set = function(out, x, y) {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    return out;\r\n};\r\n\r\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nvec2.add = function(out, a, b) {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nvec2.subtract = function(out, a, b) {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\r\nvec2.sub = vec2.subtract;\r\n\r\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nvec2.multiply = function(out, a, b) {\r\n    out[0] = a[0] * b[0];\r\n    out[1] = a[1] * b[1];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\r\nvec2.mul = vec2.multiply;\r\n\r\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nvec2.divide = function(out, a, b) {\r\n    out[0] = a[0] / b[0];\r\n    out[1] = a[1] / b[1];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\r\nvec2.div = vec2.divide;\r\n\r\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nvec2.min = function(out, a, b) {\r\n    out[0] = Math.min(a[0], b[0]);\r\n    out[1] = Math.min(a[1], b[1]);\r\n    return out;\r\n};\r\n\r\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nvec2.max = function(out, a, b) {\r\n    out[0] = Math.max(a[0], b[0]);\r\n    out[1] = Math.max(a[1], b[1]);\r\n    return out;\r\n};\r\n\r\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\r\nvec2.scale = function(out, a, b) {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    return out;\r\n};\r\n\r\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\r\nvec2.scaleAndAdd = function(out, a, b, scale) {\r\n    out[0] = a[0] + (b[0] * scale);\r\n    out[1] = a[1] + (b[1] * scale);\r\n    return out;\r\n};\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nvec2.distance = function(a, b) {\r\n    var x = b[0] - a[0],\r\n        y = b[1] - a[1];\r\n    return Math.sqrt(x*x + y*y);\r\n};\r\n\r\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\r\nvec2.dist = vec2.distance;\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nvec2.squaredDistance = function(a, b) {\r\n    var x = b[0] - a[0],\r\n        y = b[1] - a[1];\r\n    return x*x + y*y;\r\n};\r\n\r\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\r\nvec2.sqrDist = vec2.squaredDistance;\r\n\r\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nvec2.length = function (a) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    return Math.sqrt(x*x + y*y);\r\n};\r\n\r\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\r\nvec2.len = vec2.length;\r\n\r\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nvec2.squaredLength = function (a) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    return x*x + y*y;\r\n};\r\n\r\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\r\nvec2.sqrLen = vec2.squaredLength;\r\n\r\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\nvec2.negate = function(out, a) {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\r\nvec2.inverse = function(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  return out;\r\n};\r\n\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\r\nvec2.normalize = function(out, a) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    var len = x*x + y*y;\r\n    if (len > 0) {\r\n        //TODO: evaluate use of glm_invsqrt here?\r\n        len = 1 / Math.sqrt(len);\r\n        out[0] = a[0] * len;\r\n        out[1] = a[1] * len;\r\n    }\r\n    return out;\r\n};\r\n\r\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nvec2.dot = function (a, b) {\r\n    return a[0] * b[0] + a[1] * b[1];\r\n};\r\n\r\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\r\nvec2.cross = function(out, a, b) {\r\n    var z = a[0] * b[1] - a[1] * b[0];\r\n    out[0] = out[1] = 0;\r\n    out[2] = z;\r\n    return out;\r\n};\r\n\r\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec2} out\r\n */\r\nvec2.lerp = function (out, a, b, t) {\r\n    var ax = a[0],\r\n        ay = a[1];\r\n    out[0] = ax + t * (b[0] - ax);\r\n    out[1] = ay + t * (b[1] - ay);\r\n    return out;\r\n};\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\r\nvec2.random = function (out, scale) {\r\n    scale = scale || 1.0;\r\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n    out[0] = Math.cos(r) * scale;\r\n    out[1] = Math.sin(r) * scale;\r\n    return out;\r\n};\r\n\r\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nvec2.transformMat2 = function(out, a, m) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    out[0] = m[0] * x + m[2] * y;\r\n    out[1] = m[1] * x + m[3] * y;\r\n    return out;\r\n};\r\n\r\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nvec2.transformMat2d = function(out, a, m) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    out[0] = m[0] * x + m[2] * y + m[4];\r\n    out[1] = m[1] * x + m[3] * y + m[5];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nvec2.transformMat3 = function(out, a, m) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    out[0] = m[0] * x + m[3] * y + m[6];\r\n    out[1] = m[1] * x + m[4] * y + m[7];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nvec2.transformMat4 = function(out, a, m) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    out[0] = m[0] * x + m[4] * y + m[12];\r\n    out[1] = m[1] * x + m[5] * y + m[13];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nvec2.forEach = (function() {\r\n    var vec = vec2.create();\r\n\r\n    return function(a, stride, offset, count, fn, arg) {\r\n        var i, l;\r\n        if(!stride) {\r\n            stride = 2;\r\n        }\r\n\r\n        if(!offset) {\r\n            offset = 0;\r\n        }\r\n\r\n        if(count) {\r\n            l = Math.min((count * stride) + offset, a.length);\r\n        } else {\r\n            l = a.length;\r\n        }\r\n\r\n        for(i = offset; i < l; i += stride) {\r\n            vec[0] = a[i]; vec[1] = a[i+1];\r\n            fn(vec, vec, arg);\r\n            a[i] = vec[0]; a[i+1] = vec[1];\r\n        }\r\n\r\n        return a;\r\n    };\r\n})();\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} vec vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nvec2.str = function (a) {\r\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\r\n};\r\n\r\nmodule.exports = vec2;\r\n\r\n/**\r\n * Adds three vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {vec2} c the third operand\r\n * @returns {vec2} out\r\n */\r\nvec2.add3 = function(out, a, b, c) {\r\n    out[0] = a[0] + b[0] + c[0];\r\n    out[1] = a[1] + b[1] + c[1];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Calculates the shortest projection between a point and a line defined by two vec2's\r\n *\r\n * @param {vec2} p the point\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} projection between p and the line defined a and b\r\n */\r\nvec2.projectionToSegment = function(out, p, a, b) {\r\n  var l2 = vec2.squaredDistance(a, b);\r\n  if (l2 === 0) return vec2.subtract(out, p, a); // point to line of one point\r\n  // tangencial projection\r\n  var t = ((p[0] - a[0]) * (b[0] - a[0]) + (p[1] - a[1]) * (b[1] - a[1])) / l2;\r\n  if (t < 0) return vec2.subtract(out, p, a); // beyond a\r\n  if (t > 1) return vec2.subtract(out, p, b); // beyond b\r\n  // projection within a-b\r\n  vec2.lerp(out,a,b,t);\r\n  return vec2.subtract(out, p, out);\r\n};\r\n\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @param {Number} scale the amount to scale a by after normalize\r\n * @returns {vec2} out\r\n */\r\nvec2.normalizeAndScale = function(out, a, b) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    var len = x*x + y*y;\r\n    if (len > 0) {\r\n        //TODO: evaluate use of glm_invsqrt here?\r\n        len = b / Math.sqrt(len);\r\n        out[0] = a[0] * len;\r\n        out[1] = a[1] * len;\r\n    }\r\n    return out;\r\n};\r\n","/* global window,module, exports : true, define */\r\n\r\nvar CrowdSim = {\r\n  Entity: require('./Entities/Entity'),\r\n  Agent: require('./Entities/Agent'),\r\n  Context: require('./Entities/Context'),\r\n  Wall: require('./Entities/Wall'),\r\n  Path: require('./Entities/Path'),\r\n  Group: require('./Entities/Group'),\r\n  World: require('./World'),\r\n  Engine: require('./Engine'),\r\n  Render: require('./Render/Render')\r\n};\r\n\r\nmodule.exports = CrowdSim;\r\n\r\n// browser\r\nif (typeof window === 'object' && typeof window.document === 'object') {\r\n  window.CrowdSim = CrowdSim;\r\n}\r\n","'use strict';\r\n\r\n//var $ = jQuery =\r\n\r\nvar Engine = function(world, options) {\r\n  this.running = false;\r\n  this.iterations = 0;\r\n  //this.agentsSave = JSON.parse(JSON.stringify(world.agents));\r\n  this.world = world || {};\r\n  this.world.save();\r\n\r\n  var defaultOptions = {\r\n    timeStepSize: 0.1\r\n  };\r\n  this.options = Lazy(options).defaults(defaultOptions).toObject();\r\n};\r\n\r\nEngine.prototype.setWorld = function(world) {\r\n  this.world = world;\r\n};\r\n\r\nEngine.prototype.getWorld = function() {\r\n  return this.world;\r\n};\r\n\r\nEngine.prototype.run = function() {\r\n  if (this.running) {\r\n    return;\r\n  }\r\n  this.running = true;\r\n  this._step();\r\n  return this.running;\r\n};\r\n\r\nEngine.prototype.step = function() {\r\n  if (this.running) {\r\n    return;\r\n  }\r\n  this._step();\r\n};\r\n\r\nEngine.prototype._step = function() {\r\n  var world = this.world;\r\n  var options = this.options;\r\n  var timeStepSize = options.timeStepSize;\r\n  var agents = this.world.getAgents();\r\n  Lazy(agents).each(function(agent) {\r\n    agent.step(timeStepSize);\r\n    if (agent.selected) {\r\n      world.agentSelected = agent;\r\n      return;\r\n    }\r\n  });\r\n  Lazy(this.world.getGroups()).each(function(group) {\r\n    group.step(timeStepSize);\r\n  });\r\n\r\n  this.iterations++;\r\n  if (options.onStep) {\r\n    options.onStep(world);\r\n  }\r\n\r\n  if (this.running) {\r\n    var that = this;\r\n    setTimeout(function() {\r\n      that._step();\r\n    }, options.timeStepRun * 1000);\r\n  }\r\n};\r\n\r\nEngine.prototype.stop = function() {\r\n  if (!this.running) {\r\n    return;\r\n  }\r\n  this.running = false;\r\n  return this.running;\r\n};\r\nEngine.prototype.reset = function() {\r\n  this.iterations = 0;\r\n  this.running = false;\r\n  this.world.restore();\r\n};\r\n\r\nmodule.exports = Engine;\r\n","'use strict';\r\n\r\nvar Entity = require('./Entity');\r\nvar Vec2 = require('../Common/Vec2');\r\n\r\nvar Agent = function(x, y, group, options) {\r\n  var that = this;\r\n  Entity.call(this, x, y);\r\n  this.id = Agent.id++;\r\n\r\n  Lazy(options).defaults(Agent.defaults).each(function(v, k) {\r\n    that[k] = v;\r\n  });\r\n  this.group = group;\r\n  this.vel = Vec2.create();\r\n  this.behavior = null; // function set by group\r\n  if (this.debug) {\r\n    this.debug = {};\r\n  }\r\n};\r\n\r\nAgent.prototype.getRadius = function() {\r\n  return this.radius;\r\n};\r\n\r\nAgent.prototype.followGroupPath = function(index) {\r\n  var path = this.group.getPath();\r\n  if (path) {\r\n    var wps = path.getWaypoints();\r\n    this.target = wps[index || 0];\r\n    this.pathNextIdx = 1;\r\n  } else {\r\n    this.target = null;\r\n    this.pathNextIdx = 0;\r\n  }\r\n};\r\n\r\nAgent.prototype.step = function(stepSize) {\r\n  var wps = this.group.getPath().getWaypoints();\r\n  var accel = this.group.behavior.getAccel(this, this.target);\r\n\r\n  if (this.debug) {\r\n    if (accel && (isNaN(accel[0]) || isNaN(accel[1]))) {\r\n      throw 'Agent pos invalid';\r\n    }\r\n  }\r\n\r\n  this.move(accel, stepSize);\r\n  // update target to next if arrive at current\r\n  if (this.target) {\r\n    var distToTarget = Vec2.distance(this.pos, this.target.pos);\r\n    if (distToTarget < this.target.getRadius()) {\r\n      if (this.pathNextIdx < wps.length) {\r\n        // follow to next waypoint\r\n        this.target = wps[this.pathNextIdx++];\r\n      } else {\r\n        // arrived at last!\r\n        this.pathNextIdx = null;\r\n        this.target = null;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nAgent.prototype.move = function(accel, stepSize) {\r\n  /*if (Vec2.length(accel) > this.maxAccel) {\r\n    Vec2.normalizeAndScale(accel, accel, this.maxAccel);\r\n  }*/\r\n  Vec2.scaleAndAdd(this.vel, this.vel, accel, stepSize);\r\n\r\n  if (Vec2.length(this.vel) > this.maxVel) {\r\n    Vec2.normalizeAndScale(this.vel, this.vel, this.maxVel);\r\n  }\r\n\r\n  Vec2.scaleAndAdd(this.pos, this.pos, this.vel, stepSize * this.mobility);\r\n};\r\n\r\nAgent.defaults = {\r\n  debug: false,\r\n  size: 0.5,\r\n  mass: 80e3,\r\n  mobility: 1.0,\r\n  maxAccel: 0.5, // m/s^2\r\n  maxVel: 1 // m/seg\r\n};\r\nAgent.id = 0;\r\nAgent.type = 'agent';\r\n\r\nmodule.exports = Agent;\r\n","\r\nvar Entity = require('./Entity');\r\nvar Vec2 = require('../Common/Vec2');\r\n\r\nvar Context = function(x, y, world, options) {\r\n  Entity.call(this, x, y, world);\r\n  this.id = 'C' + Context.id++;\r\n  this.options = Lazy(options).defaults(Context.defaults).toObject();\r\n};\r\n\r\nContext.prototype.setArea = function(x, y) {\r\n  this.options.width = Math.abs(this.pos[0] - x) * 2;\r\n  this.options.height = Math.abs(this.pos[1] - y) * 2;\r\n};\r\n\r\nContext.prototype.getWidth = function() {\r\n  return this.options.width;\r\n};\r\n\r\nContext.prototype.getHeight = function() {\r\n  return this.options.height;\r\n};\r\n\r\nContext.prototype.getRandomPoint = function() {\r\n  var x = this.pos[0] + (Math.random() - 0.5) * this.options.width;\r\n  var y = this.pos[1] + (Math.random() - 0.5) * this.options.height;\r\n  return Vec2.fromValues(x, y);\r\n};\r\n\r\nContext.prototype.in = function(pos) {\r\n  var w2 = this.options.width / 2;\r\n  var h2 = this.options.height / 2;\r\n  var isIn = (this.pos[0] - w2 < pos[0] && pos[0] < this.pos[0] + w2) &&\r\n             (this.pos[1] - h2 < pos[1] && pos[1] < this.pos[1] + h2);\r\n  return isIn;\r\n};\r\n\r\nContext.defaults = {\r\n  mobility: 1,\r\n  hazardLevel: 0,\r\n  width: 10,\r\n  height: 10\r\n};\r\nContext.id = 0;\r\nContext.type = 'context';\r\n\r\nmodule.exports = Context;\r\n","var Vec2 = require('../Common/Vec2');\n\nvar Entity = function(x, y, world) {\n  this.extra = {}; // for extra informatin, e.g. render object\n  this.pos = Vec2.fromValues(x, y);\n  this.world = world;\n  this.entities = {}; // children entities\n};\n\nEntity.prototype.updatePos = function(x, y) {\n  this.pos[0] = x;\n  this.pos[1] = y;\n};\n\nmodule.exports = Entity;\n","'use strict';\r\n\r\nvar Entity = require('./Entity');\r\nvar Agent = require('./Agent');\r\nvar Context = require('./Context');\r\nvar Vec2 = require('../Common/Vec2');\r\nvar Panic = require('../Behavior/Panic');\r\n\r\nvar Group = function(x, y, world, options) {\r\n  Entity.call(this, x, y, world);\r\n  this.id = 'G' + Group.id++;\r\n  this.options = Lazy(options).defaults(Group.defaults).toObject();\r\n  this.behavior = new Panic(this.world);\r\n  this.agents = [];\r\n  this.agentsCount = this.options.agentsCount;\r\n  this.entities.path = null;\r\n  this.entities.startContext = null;\r\n  this.entities.endContext = null;\r\n};\r\n\r\nGroup.prototype.assignStartContext = function(context) {\r\n  this.entities.startContext = context;\r\n};\r\n\r\nGroup.prototype.assignEndContext = function(context) {\r\n  this.entities.endContext = context;\r\n};\r\n\r\nGroup.prototype.assignBehavior = function(behavior) {\r\n  this.behavior = behavior;\r\n};\r\n\r\nGroup.prototype.assignPath = function(path) {\r\n  this.entities.path = path;\r\n  for (var i  in this.agents) {\r\n    this.agents[i].followGroupPath();\r\n  }\r\n};\r\n\r\nGroup.prototype.generateAgents = function(agentsCount, startContext) {\r\n  if (!startContext) {\r\n    startContext = this.entities.startContext;\r\n  }\r\n  var newAgents = [];\r\n  var opts = this.options;\r\n  for (var i = 0; i < agentsCount; i++) {\r\n    var pos = this.entities.startContext ? this.entities.startContext.getRandomPoint() : this.pos;\r\n    var size = opts.agentsSizeMin;\r\n    if (opts.agentsSizeMin !== opts.agentsSizeMax) {\r\n      // random uniform distribution\r\n      size = opts.agentsSizeMin + Math.random() * (opts.agentsSizeMax - opts.agentsSizeMin);\r\n    }\r\n    var agent = new Agent(pos[0], pos[1], this, {size: size, debug: opts.debug});\r\n    agent.followGroupPath();\r\n    newAgents.push(agent);\r\n  }\r\n  return newAgents;\r\n};\r\n\r\nGroup.prototype.addAgents = function(agentsCount) {\r\n  var newAgents = this.generateAgents(agentsCount);\r\n  this.agents = this.agents.concat(newAgents);\r\n  this.world.addAgents(newAgents);\r\n};\r\n\r\nGroup.prototype.removeAgents = function(agents) {\r\n  for (var i in agents) {\r\n    var j = this.agents.indexOf(agents[i]);\r\n    this.agents.splice(j, 1);\r\n  }\r\n  this.world.removeAgents(agents);\r\n};\r\n\r\nGroup.prototype.getPath = function() {\r\n  return this.entities.path;\r\n};\r\n\r\nGroup.prototype.getstartContext = function() {\r\n  return this.entities.startContext;\r\n};\r\n\r\nGroup.prototype.getArea = function() {\r\n  return [\r\n    Vec2.fromValues(\r\n      Lazy(this.agents).map(function(e) { return e.pos[0] - e.size; }).min(),\r\n      Lazy(this.agents).map(function(e) { return e.pos[0] + e.size; }).max()\r\n    ),\r\n    Vec2.fromValues(\r\n      Lazy(this.agents).map(function(e) { return e.pos[1] - e.size; }).min(),\r\n      Lazy(this.agents).map(function(e) { return e.pos[1] + e.size; }).max()\r\n    )\r\n  ];\r\n};\r\n\r\nGroup.prototype.addAgent = function(agent) {\r\n  this.agents.concat(agent);\r\n};\r\n\r\nGroup.prototype.step = function() {\r\n  if (this.agents.length === 0) {\r\n    this.addAgents(this.options.agentsCount);\r\n  }\r\n\r\n  if (this.options.startRate > 0 && this.options.startProb > 0 && this.agents.length < this.options.agentsMax) {\r\n    var probBirth = Math.random();\r\n    if (probBirth < this.options.startProb) {\r\n      var rate = this.options.startRate ;\r\n      if (rate + this.agents.length > this.options.agentsMax) {\r\n        // limit maximun agents\r\n        rate = this.options.agentsMax;\r\n      }\r\n      this.addAgents(rate);\r\n    }\r\n  }\r\n  if (this.entities.endContext) {\r\n    var agentsIn = this.world.agentsInContext(this.entities.endContext, this.agents);\r\n    if (agentsIn.length > 0 && this.options.endRate > 0 && this.options.endProb > 0) {\r\n      var probDie = Math.random();\r\n      if (probDie < this.options.endProb) {\r\n        this.removeAgents(agentsIn);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nGroup.defaults = {\r\n  agentsSizeMin: 0.5,\r\n  agentsSizeMax: 0.5,\r\n  agentsCount: 10,\r\n  agentsMax: 100,\r\n  debug: false,\r\n  startProb: 0, // Adds agents per step in startContext\r\n  startRate: 0, // Adds agents probability per step in startContext\r\n  endProb: 0, // Removes agents per step in endContext\r\n  endRate: 0 // Removes agents probability per step in endContext\r\n};\r\nGroup.id = 0;\r\n\r\nmodule.exports = Group;\r\n","var Entity = require('./Entity');\n\nvar Joint = function(x, y, world, options) {\n  Entity.call(this, x, y, world);\n  this.id = 'J' + Joint.id++;\n  this.options = Lazy(options).defaults(Joint.defaults).toObject();\n};\n\nJoint.prototype.getRadius = function() {\n  return this.options.radius;\n};\n\nJoint.defaults = {\n  radius: 4\n};\nJoint.id = 0;\nJoint.type = 'joint';\n\nmodule.exports = Joint;\n","'use strict';\n\nvar Entity = require('./Entity');\nvar Joint = require('./Joint');\n\nvar Path = function(x, y, world, options) {\n  Entity.call(this, x, y, world);\n  this.id = 'P' + Path.id++;\n  this.options = Lazy(options).defaults(Path.defaults).toObject();\n  this.entities.wps = [];\n  if (x && y) {\n    this.addWaypoint(x,y,this.options.radius);\n  }\n};\n\nPath.prototype.addWaypoints = function(wps) {\n  for (var i in wps) {\n    var wp = wps[i];\n    var radius = null;\n    if (wp.length === 2) {\n      radius = wp[3];\n    }\n    this.addWaypoint(wp[0],wp[1],radius);\n  }\n};\n\nPath.prototype.addWaypoint = function(x, y, radius) {\n  Entity.prototype.updatePos.call(this,x,y);\n  if (!radius) {\n    radius = this.entities.wps.length === 0 ? this.options.radius : this.entities.wps[this.entities.wps.length - 1].radius;\n  }\n  var wp = new Joint(x, y, this.world, {radius: radius});\n  this.entities.wps.push(wp);\n  return wp;\n};\n\nPath.prototype.getWaypoints = function() {\n  return this.entities.wps;\n};\n\nPath.prototype.getWidth = function() {\n  return this.options.width;\n};\n\nPath.prototype.reverse = function() {\n  this.entities.wps = Lazy(this.entities.wps).reverse().toArray();\n};\n\nPath.defaults = {\n  width: 0.2,\n  radius: 4\n};\nPath.id = 0;\nPath.type = 'path';\n\nmodule.exports = Path;\n","\nvar Vec2 = require('../Common/Vec2');\nvar Entity = require('./Entity');\nvar Joint = require('./Joint');\n\nvar Wall = function(x, y, world, options) {\n  Entity.call(this, x, y, world);\n  this.id = 'W' + Wall.id++;\n  this.options = Lazy(options).defaults(Wall.defaults).toObject();\n  this.entities.corners = [];\n  if (x && y) {\n    this.addCorner(x, y);\n  }\n};\n\nWall.prototype.addCorners = function(corner) {\n  // n joints, n-1 sections\n  for (var i in corner) {\n    var p = corner[i];\n    this.addCorner(p[0], p[1]);\n  }\n};\n\nWall.prototype.addCorner = function(x, y) {\n  Entity.prototype.updatePos.call(this, x, y);\n  var joint = new Joint(x, y, this.world, {radius: this.getCornerWidth()});\n  this.entities.corners.push(joint);\n  return joint;\n};\n\nWall.prototype.getCorners = function() {\n  return this.entities.corners;\n};\n\nWall.prototype.getCornerWidth = function() {\n  return this.options.width * 2;\n};\n\nWall.prototype.getWidth = function() {\n  return this.options.width;\n};\n\nWall.prototype.getProjection = function(point, segment) {\n  if (segment < 0 || segment >= this.entities.corners.length - 1) {\n    throw 'Segment out of bounds';\n  }\n  var projection = Vec2.create();\n  return Vec2.projectionToSegment(projection, point, this.entities.corners[segment].pos, this.entities.corners[segment + 1].pos);\n};\n\nWall.defaults = {\n  width: 0.2\n};\nWall.id = 0;\nWall.type = 'wall';\n\nmodule.exports = Wall;\n","'use strict';\n\nvar Vec2 = require('../Common/Vec2');\nvar Base = require('./Base');\nvar Entity = require('./Entity');\nvar Detail = require('./Detail');\nvar Colors = Base.Colors;\n\nvar Agent = function(agent) {\n  if (!agent) {\n    throw 'Agent object must be defined';\n  }\n  //var display = new PIXI.Sprite(options.texture);\n\n  Entity.call(this, agent);\n  this.sprite = new PIXI.Sprite(Agent.texture);\n  Entity.prototype.createGraphics.call(this,Agent.container, this.sprite);\n  this.sprite.visible = Agent.detail.level > 0;\n  this.sprite.anchor.set(0.5);\n  //this.display.alpha = 0.5;\n  var size = agent.size;\n  this.sprite.height = size;\n  this.sprite.width = size;\n  this.sprite.position.x = agent.pos[0];\n  this.sprite.position.y = agent.pos[1];\n};\n\nAgent.prototype.destroy = function() {\n  Entity.prototype.destroyGraphics.call(this,Agent.container, this.sprite);\n  Entity.prototype.destroyGraphics.call(this,Agent.container, this.graphics);\n};\n\nAgent.prototype.render = function() {\n  if (!Agent.detail.level) {\n    this.sprite.visible = false;\n    this.sprite.alpha = 0;\n    if (this.graphics) {\n      this.graphics.clear();\n    }\n    return;\n  } else {\n    this.sprite.alpha = 1;\n    this.sprite.visible = true;\n  }\n  Entity.prototype.render.call(this);\n\n  var e = this.entityModel;\n  this.sprite.position.set(e.pos[0], e.pos[1]);\n  this.sprite.rotation = Math.atan2(e.vel[1], e.vel[0]) - Math.PI / 2;\n\n  if (Agent.detail.level > 1) {\n    if (!this.graphics) {\n      this.graphics = Entity.prototype.createGraphics.call(this,Agent.debugContainer);\n      this.circle = new PIXI.Circle(e.pos[0],e.pos[1], e.size / 2);\n      //this.graphics.addChild(this.circle);\n    }\n    this.graphics.clear();\n  }\n\n  if (Agent.detail.level > 1) {\n    if (this.circle) {\n      this.circle.x = e.pos[0];\n      this.circle.y = e.pos[1];\n      this.graphics.lineStyle(0.1, Colors.Agent);\n      this.graphics.drawShape(this.circle);\n    }\n  }\n  if (Agent.detail.level > 2) {\n    this.graphics.moveTo(e.pos[0], e.pos[1]);\n    this.graphics.lineTo(e.pos[0] + e.vel[0], e.pos[1] + e.vel[1]);\n  }\n  if (e.debug) {\n    if (Agent.detail.level > 3 && e.debug.forces) {\n      var force = Vec2.create();\n      for (var f in e.debug.forces) {\n        this.graphics.lineStyle(0.1, Colors.Forces[f]);\n        this.graphics.moveTo(e.pos[0], e.pos[1]);\n        Vec2.normalize(force, e.debug.forces[f]);\n        this.graphics.lineTo(e.pos[0] + force[0], e.pos[1] + force[1]);\n      }\n    }\n    if (isNaN(e.pos[0]) || isNaN(e.pos[1])) {\n      throw 'Agent position undefined';\n    }\n  }\n};\n\nAgent.texture = null; // agents texture\nAgent.debugContainer = null; // special container use to render all agents, e.g particleContainer\nAgent.detail = new Detail(4);\n\nmodule.exports = Agent;\n","'use strict';\r\n\r\nvar Colors = {\r\n  Hover: 0xebff00,\r\n  Context: 0x646729,\r\n  Agent: 0xFF0000,\r\n  Group: 0xFFFFFF,\r\n  Wall: 0x00FF00,\r\n  Joint: 0xAAAAAA,\r\n  Path: 0xe00777,\r\n  Waypoint: 0x7a7a7a,\r\n  Forces: {desired: 0xfffff,\r\n          agents: 0xFF0000,\r\n          walls: 0xc49220\r\n          }\r\n};\r\n\r\nvar Fonts = {\r\n  default: {font: '2px Mono monospace', fill: 0xFFFFFF,\r\n  align: 'center'},\r\n  resolution: 12\r\n};\r\n\r\nmodule.exports.Colors = Colors;\r\nmodule.exports.Fonts = Fonts;\r\n","'use strict';\n\nvar Base = require('./Base');\nvar Entity = require('./Entity');\nvar Detail = require('./Detail');\nvar Colors = Base.Colors;\n\nvar Context = function(context) {\n  if (!context) {\n    throw 'Context object must be defined';\n  }\n  Entity.call(this, context);\n};\n\nContext.prototype.destroy = function() {\n  Entity.prototype.destroyGraphics.call(this,Context.container, this.graphics);\n};\n\nContext.prototype.createGraphics = function(context) {\n  this.graphics = Entity.prototype.createGraphics.call(this,Context.container);\n  this.rect = new PIXI.Rectangle(0, 0, 0, 0);\n  this.rect.entityModel = context;\n  this.label = new PIXI.Text(context.id, Base.Fonts.default);\n  this.label.resolution = Base.Fonts.resolution;\n  this.graphics.addChild(this.label);\n  this.graphics.entity = this;\n};\n\nContext.prototype.getAnchor = function(init) {\n  var context = this.entityModel;\n  return {x: context.pos[0], y: context.pos[1]};\n};\n\nContext.prototype.dragTo = function(pos, anchor) {\n  var context = this.entityModel;\n  context.pos[0] = pos.x;\n  context.pos[1] = pos.y;\n};\n\nContext.prototype.render = function(options) {\n  if (!Context.detail.level) {\n    this.graphics.clear();\n    return;\n  }\n  Entity.prototype.render.call(this,this.graphics);\n  var context = this.entityModel;\n  // init render\n  if (!this.graphics && Context.detail.level) {\n    this.createGraphics(context);\n  } else {\n    this.graphics.clear();\n  }\n\n  if (Context.detail.level > 0) {\n    var w = context.getWidth();\n    var h = context.getHeight();\n    this.rect.x = context.pos[0] - w / 2;\n    this.rect.y = context.pos[1] - h / 2;\n    this.rect.width = w;\n    this.rect.height = h;\n    this.label.x = context.pos[0] - this.label.width / 2;\n    this.label.y = context.pos[1] - this.label.height / 2;\n    this.graphics.beginFill(this.hover ? Colors.Hover : Colors.Context, this.hover ? 0.9 : 0.3);\n    this.graphics.drawShape(this.rect);\n    this.graphics.endFill();\n  }\n};\n\nContext.prototype.setArea = function(x, y) {\n  this.entityModel.setArea(x, y);\n};\n\nContext.detail = new Detail(2);\n\nmodule.exports = Context;\n","'use strict';\r\n\r\nvar Detail = function(maxDetail, detail) {\r\n  this.maxDetail = maxDetail;\r\n  this.level = detail || 1;\r\n};\r\n\r\nDetail.prototype.cycleDetail = function(detail) {\r\n  if (detail) {\r\n    this.level = detail;\r\n  } else {\r\n    this.level ++;\r\n    if (this.level > this.maxDetail) {\r\n      this.level = 0;\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = Detail;\r\n","'use strict';\r\n\r\nvar Base = require('./Base');\r\n\r\n/*\r\n* Base render prototype\r\n*/\r\nvar Entity = function(entity) {\r\n  if (!entity) {\r\n    throw 'Entity undefined';\r\n  }\r\n  this.entityModel = entity;\r\n  this.entityModel.extra.view = this;\r\n  this.selected = false;\r\n};\r\n\r\nEntity.prototype.createGraphics = function(container, graphics) {\r\n  if (!graphics) {\r\n    graphics = new PIXI.Graphics();\r\n  }\r\n  Entity.setInteractive(graphics);\r\n  graphics._entityView = this;\r\n  // add it the container so we see it on our screens.\r\n  container.addChild(graphics);\r\n  return graphics;\r\n};\r\n\r\nEntity.prototype.destroyGraphics = function(container, graphics) {\r\n  if (graphics) {\r\n    graphics.destroy();\r\n    container.removeChild(graphics);\r\n  }\r\n};\r\n\r\nEntity.setInteractive = function(displayObject) {\r\n  displayObject.interactive = true;\r\n  displayObject.buttonMode = true;\r\n  displayObject.mouseover = Entity.mouseover;\r\n  displayObject.mouseout = Entity.mouseout;\r\n  displayObject.mousedown = Entity.mousedown;\r\n  displayObject.mouseup = Entity.mouseup;\r\n  displayObject.mousemove = Entity.mousemove;\r\n};\r\n\r\nEntity.prototype.render = function(graphics) {\r\n  //this.display.clear();\r\n};\r\n\r\nEntity.prototype.destroy = function(container, graphics) {\r\n  this.destroyGraphics(container, graphics);\r\n};\r\n\r\nEntity.mousedown = null;\r\nEntity.mousemove = null;\r\nEntity.mouseup = null;\r\nEntity.mouseover = null;\r\nEntity.mouseout = null;\r\n\r\nmodule.exports = Entity;\r\n","'use strict';\n\nvar Base = require('./Base');\nvar Entity = require('./Entity');\nvar Detail = require('./Detail');\nvar Colors = Base.Colors;\n\nvar Group = function(group) {\n  if (!group) {\n    throw 'Group object must be defined';\n  }\n  Entity.call(this, group);\n};\n\nGroup.prototype.createGraphics = function(group) {\n  this.graphics = Entity.prototype.createGraphics.call(this,Group.container);\n  this.label = new PIXI.Text(group.id, Base.Fonts.default);\n  this.label.resolution = Base.Fonts.resolution;\n  this.rect = new PIXI.Rectangle(0, 0, this.label.width, this.label.height);\n  this.rect.entityModel = group;\n  this.graphics.addChild(this.label);\n  this.graphics.entity = this;\n};\n\nGroup.prototype.render = function(options) {\n  if (!Group.detail.level) {\n    this.graphics.clear();\n    return;\n  }\n  Entity.prototype.render.call(this,this.graphics);\n  var group = this.entityModel;\n  // init render\n  if (!this.graphics && Group.detail.level) {\n    this.createGraphics(group);\n  } else {\n    this.graphics.clear();\n  }\n\n  if (Group.detail.level > 0) {\n    this.rect.x = this.label.x = group.pos[0] - this.label.width / 2;\n    this.rect.y = this.label.y = group.pos[1] - this.label.height / 2 ;\n    this.graphics.beginFill(this.hover ? Colors.Hover : Colors.Group, this.hover ? 0.9 : 0.3);\n    this.graphics.drawShape(this.rect);\n    this.graphics.endFill();\n    var entities = group.entities;\n    for (var i in entities) {\n      if (entities[i]) {\n        var subEntity = entities[i];\n        this.graphics.lineStyle(0.2, Colors.Group, 0.4);\n        this.graphics.moveTo(group.pos[0],group.pos[1]);\n        this.graphics.lineTo(subEntity.pos[0],subEntity.pos[1]);\n      }\n    }\n  }\n};\n\nGroup.prototype.getAnchor = function(init) {\n  var group = this.entityModel;\n  return {x: group.pos[0], y: group.pos[1]};\n};\n\nGroup.prototype.dragTo = function(pos, anchor) {\n  var group = this.entityModel;\n  group.pos[0] = pos.x;\n  group.pos[1] = pos.y;\n};\n\nGroup.detail = new Detail(2);\n\nmodule.exports = Group;\n","'use strict';\n\nvar Vec2 = require('../Common/Vec2');\nvar Base = require('./Base');\nvar Entity = require('./Entity');\nvar Detail = require('./Detail');\nvar Colors = Base.Colors;\n\nvar Joint = function(joint, texture, scalable) {\n  if (!joint) {\n    throw 'Joint object must be defined';\n  }\n  Entity.call(this, joint);\n  this.texture = texture;\n  this.scalable = scalable;\n};\n\nJoint.prototype.destroy = function(graphics) {\n  graphics.addChild(this.sprite);\n};\n\nJoint.prototype.createGraphics = function(graphics) {\n  var joint = this.entityModel;\n  this.sprite = new PIXI.Sprite(this.texture);\n  Entity.prototype.createGraphics.call(this, graphics, this.sprite);\n  this.label = new PIXI.Text(joint.id, Base.Fonts.default);\n  this.label.resolution = Base.Fonts.resolution;\n  graphics.addChild(this.label);\n  this.sprite.anchor.x = 0.5;\n  this.sprite.anchor.y = 0.5;\n  this.sprite.entity = this;\n  this.sprite.alpha = 0.5;\n  this.render();\n};\n\nJoint.prototype.render = function() {\n  this.sprite.x = this.entityModel.pos[0];\n  this.sprite.y = this.entityModel.pos[1];\n  this.sprite.width = 2 * this.entityModel.getRadius();\n  this.sprite.height = 2 * this.entityModel.getRadius();\n  this.sprite.tint = this.hover ? Colors.Hover : Colors.Joint;\n  this.label.x = this.sprite.x;\n  this.label.y = this.sprite.y;\n};\n\nJoint.prototype.getAnchor = function(init) {\n  return {x: this.entityModel.pos[0], y: this.entityModel.pos[1]};\n};\n\nJoint.prototype.dragTo = function(pos, anchor) {\n  var anchorV2 = Vec2.fromValues(anchor.x,anchor.y);\n  var radius = Vec2.length(anchorV2);\n  var posV2 = Vec2.fromValues(pos.x,pos.y);\n  Vec2.subtract(posV2,posV2,this.entityModel.pos);\n  var newRadius = Vec2.length(posV2);\n  // calculate new size or position if dragging border or body\n  if (this.scalable && newRadius >  this.entityModel.getRadius() * 0.80) {\n    this.entityModel.radius  = newRadius;\n    this.sprite.width = 2 * newRadius;\n    this.sprite.height = 2 * newRadius;\n  } else {\n    this.entityModel.pos[0] = pos.x;\n    this.entityModel.pos[1] = pos.y;\n    this.sprite.x = pos.x;\n    this.sprite.y = pos.y;\n  }\n};\n\nmodule.exports = Joint;\n","'use strict';\n\nvar Base = require('./Base');\nvar Joint = require('./Joint');\nvar Entity = require('./Entity');\nvar Detail = require('./Detail');\nvar Colors = Base.Colors;\n\nvar Path = function(path) {\n  if (!path) {\n    throw 'Path object must be defined';\n  }\n  Entity.call(this, path);\n};\n\nPath.prototype.destroy = function() {\n  Entity.prototype.destroyGraphics.call(this,Path.container, this.graphics);\n  this.destroyGraphics(Path.container);\n};\n\nPath.prototype.createGraphics = function(path) {\n  this.graphics = Entity.prototype.createGraphics.call(this,Path.container);\n  this.label = new PIXI.Text(path.id, Base.Fonts.default);\n  this.label.resolution = Base.Fonts.resolution;\n  this.graphics.addChild(this.label);\n  var wps = path.getWaypoints();\n  this.label.x = wps[0].pos[0] - this.label.width / 2;\n  this.label.y = wps[0].pos[1] - this.label.height / 2;\n  if (wps && wps.length > 0) {\n    this.joints = [];\n    for (var i in wps) {\n      var wp = wps[i];\n      var joint = new Joint(wp, Path.texture);\n      joint.createGraphics(this.graphics);\n      this.joints.push(joint);\n    }\n  }\n};\n\nPath.prototype.render = function(options) {\n  if (!Path.detail.level) {\n    this.graphics.clear();\n    return;\n  }\n  Entity.prototype.render.call(this,this.graphics);\n  var path = this.entityModel;\n  // init render\n  if (!this.graphics && Path.detail.level > 0) {\n    this.createGraphics(path);\n  } else {\n    this.graphics.clear();\n  }\n\n  if (this.joints && this.joints.length > 0) {\n    var points  = [];\n    if (Path.detail.level > 0) {\n      this.label.x = this.joints[0].entityModel.pos[0] - this.label.width / 2;\n      this.label.y = this.joints[0].entityModel.pos[1] - this.label.height / 2;\n      this.graphics.lineStyle(path.getWidth(), this.hover ? Colors.Hover : Colors.Path, 0.6);\n      //this.graphics.moveTo(this.joints[0].pos[0], this.joints[0].pos[1]);\n      for (var i = 0; i < this.joints.length; i++) {\n        //this.graphics.lineTo(this.joints[lj].pos[0], this.joints[lj].pos[1]);\n        var joint = this.joints[i].entityModel;\n        points.push(joint.pos[0],joint.pos[1]);\n        this.joints[i].render();\n        //this.graphics.drawCircle(joint.pos[0],joint.pos[1],joint.radius);\n      }\n      this.graphics.drawPolygon(points);\n    }\n    //this.display.beginFill(Colors.Joint);\n    if (Path.detail.level > 1) {\n      /*for (var j in this.joints) {\n        this.graphics.drawShape(this.joints[j]);\n      }*/\n    }\n    //this.display.endFill();\n\n  }\n};\n\nPath.prototype.addWaypoint = function(x, y) {\n  var path = this.entityModel;\n  var wp = path.addWaypoint(x, y);\n  var joint = new Joint(wp, Path.texture);\n  joint.createGraphics(this.graphics);\n  this.joints.push(joint);\n  return joint;\n};\n\nPath.texture = null; // paths joint texture\nPath.detail = new Detail(2);\n\nmodule.exports = Path;\n","'use strict';\n\nvar Render = {\n  Agent: require('./Agent'),\n  Entity: require('./Entity'),\n  Group: require('./Group'),\n  Context: require('./Context'),\n  Path: require('./Path'),\n  Wall: require('./Wall')\n};\n\nmodule.exports = Render;\n","'use strict';\n\nvar Base = require('./Base');\nvar Joint = require('./Joint');\nvar Entity = require('./Entity');\nvar Detail = require('./Detail');\nvar Colors = Base.Colors;\nvar Fonts = Base.Fonts;\n\nvar Wall = function(wall) {\n  if (!wall) {\n    throw 'Wall object must be defined';\n  }\n  Entity.call(this, wall, Wall.container);\n};\n\nWall.prototype.destroy = function() {\n  Entity.prototype.destroyGraphics.call(this, Wall.container, this.graphics);\n  this.destroyGraphics(Wall.container);\n};\n\nWall.prototype.createGraphics = function(wall) {\n  this.graphics = Entity.prototype.createGraphics.call(this, Wall.container);\n  this.joints = [];\n  var corners = wall.getCorners();\n  for (var j in corners) {\n    var c = corners[j];\n    var joint = new Joint(c, Wall.texture);\n    joint.createGraphics(this.graphics);\n    this.joints.push(joint);\n  }\n};\n\nWall.prototype.render = function(options) {\n  if (!Wall.detail.level) {\n    this.graphics.clear();\n    return;\n  }\n  Entity.prototype.render.call(this, this.graphics);\n  var wall = this.entityModel;\n  var corners = wall.getCorners();\n\n  // init render\n  if (!this.graphics && Wall.detail.level > 0) {\n    this.createGraphics(wall);\n  } else {\n    this.graphics.clear();\n    // color on hover\n  }\n\n  if (Wall.detail.level > 0) {\n    //this.display.beginFill(Colors.Wall, 0.1);\n    this.graphics.lineStyle(wall.getWidth(), this.hover ? Colors.Hover : Colors.Wall);\n    //this.graphics.moveTo(corners[0][0], corners[0][1]);\n    var points = [];\n    for (var i = 0; i < corners.length; i++) {\n      //this.graphics.lineTo(corners[i][0], corners[i][1]);\n      points.push(corners[i].pos[0], corners[i].pos[1]);\n      this.joints[i].render();\n    }\n    this.graphics.drawPolygon(points);\n    //this.display.endFill();\n  }\n  if (Wall.detail.level > 1) {\n    /*this.graphics.beginFill(this.hover ? Colors.Hover : Colors.Joint);\n    for (var j in this.joints) {\n      if (this.joints[j].hover) {\n\n      }\n      this.graphics.drawShape(this.joints[j].circle);\n    }\n    this.graphics.endFill();*/\n  }\n};\n\nWall.prototype.addCorner = function(x, y) {\n  var wall = this.entityModel;\n  var j = wall.addCorner(x, y);\n  var joint = new Joint(j, Wall.texture);\n  joint.createGraphics(this.graphics);\n  this.joints.push(joint);\n};\n\nWall.texture = null; // wall joints texture\nWall.detail = new Detail(2);\n\nmodule.exports = Wall;\n","'use strict';\r\n/* global CrowdSim */\r\n\r\nvar World = function(x, y, width, height) {\r\n  var that = this;\r\n  this.agents = [];\r\n\r\n  this.entities = {\r\n    groups: [],\r\n    contexts: [],\r\n    paths: [],\r\n    walls: []\r\n  };\r\n  this.wrap = true;\r\n  this.x = x;\r\n  this.y = y;\r\n  this.width = width;\r\n  this.height = height;\r\n  this.onCreateAgents = null;\r\n  this.onDestroyAgents = null;\r\n  this.onCreateEntity = null;\r\n  this.onDestroyEntity = null;\r\n};\r\n\r\nWorld.prototype.getDefaultGroup = function() {\r\n  return this.entities.groups[0];\r\n};\r\n\r\nWorld.prototype.getGroups = function() {\r\n  return this.entities.groups;\r\n};\r\n\r\nWorld.prototype.getAgents = function() {\r\n  return this.agents;\r\n};\r\n\r\nWorld.prototype.addAgents = function(agents) {\r\n  this.agents = this.agents.concat(agents);\r\n  if (this.onCreateAgents) {\r\n    this.onCreateAgents(agents);\r\n  }\r\n};\r\n\r\nWorld.prototype.removeAgents = function(agents) {\r\n  for (var i in agents) {\r\n    var j = this.agents.indexOf(agents[i]);\r\n    this.agents.splice(j,1);\r\n  }\r\n  if (this.onDestroyAgents) {\r\n    this.onDestroyAgents(agents);\r\n  }\r\n};\r\n\r\nWorld.prototype._onCreate = function(entity) {\r\n  if (this.onCreateEntity) {\r\n    this.onCreateEntity(entity);\r\n  }\r\n};\r\n\r\nWorld.prototype._onDestroy = function(entity) {\r\n  if (this.onDestroyEntity) {\r\n    this.onDestroyEntity(entity);\r\n  }\r\n};\r\n\r\nWorld.prototype.addContext = function(context) {\r\n  this.entities.contexts = this.entities.contexts.concat(context);\r\n  this._onCreate(context);\r\n};\r\n\r\nWorld.prototype.addGroup = function(group) {\r\n  this.entities.groups = this.entities.groups.concat(group);\r\n  this._onCreate(group);\r\n};\r\n\r\nWorld.prototype.addPath = function(path) {\r\n  this.entities.paths = this.entities.paths.concat(path);\r\n  this._onCreate(path);\r\n};\r\n\r\nWorld.prototype.addWall = function(wall) {\r\n  this.entities.walls = this.entities.walls.concat(wall);\r\n  this._onCreate(wall);\r\n};\r\n\r\nWorld.prototype.getEntityById = function(id) {\r\n  return Lazy(this.entities).values().flatten().findWhere({id: id});\r\n};\r\n\r\nWorld.prototype.save = function() {\r\n  this.agentsSave = JSON.stringify(this.agents);\r\n};\r\nWorld.prototype.restore = function() {\r\n  this.agents = JSON.parse(this.agentsSave);\r\n};\r\n\r\n// TODO add spatial structure to optimize this function\r\nWorld.prototype.getNeighbours = function(agent) {\r\n  return this.agents;\r\n};\r\n\r\n// TODO add spatial structure to optimize this function\r\nWorld.prototype.getNearWalls = function(agent) {\r\n  return this.entities.walls;\r\n};\r\n\r\n// TODO add spatial structure to optimize this function\r\nWorld.prototype.agentsInContext = function(context, agents) {\r\n  if (!agents) {\r\n    agents = this.agents;\r\n  }\r\n  var agentsIn = [];\r\n  for (var i in agents) {\r\n    var agent = agents[i];\r\n    if (context.in(agent.pos)) {\r\n      agentsIn.push(agent);\r\n    }\r\n  }\r\n  return agentsIn;\r\n};\r\n\r\nmodule.exports = World;\r\n"]}
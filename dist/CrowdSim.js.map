{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/Agent.js","src/CrowdSim.js","src/Engine.js","src/Entity.js","src/Group.js","src/Render.js","src/Vec2.js","src/Wall.js","src/World.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CrowdSim.js","sourceRoot":".","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* global window,module, exports : true, define */\nvar Entity = require('./Entity');\nvar Vec2 = require('./Vec2');\n\nvar Agent = function(group, x, y, size) {\n  Entity.call(this);\n\n  this.id = Agent.id++;\n  this.group = group;\n  this.pos = Vec2.fromValues(x,y);\n  this.vel = Vec2.create();\n  this.size = size;\n  this.waypoint = null;\n};\n\nAgent.prototype.step = function(step) {\n  this.group.behavior(this, step);\n};\nAgent.id = 0;\n\nmodule.exports = Agent;\n","/* global window,module, exports : true, define */\n\nvar CrowdSim = {\n  Agent: require('./Agent'),\n  Group: require('./Group'),\n  World: require('./World'),\n  Wall: require('./Wall'),\n  Engine: require('./Engine'),\n  Render: require('./Render')\n};\n\nmodule.exports = CrowdSim;\n\n// browser\nif (typeof window === 'object' && typeof window.document === 'object') {\n  window.CrowdSim = CrowdSim;\n}\n","\nvar Engine = function(world, options) {\n  this.running = false;\n  this.iterations = 0;\n  //this.agentsSave = JSON.parse(JSON.stringify(world.agents));\n  this.world = world || {};\n  this.world.save();\n\n  var defaultOptions = {\n    timestep: 10 / 60\n  };\n  this.options = Lazy(options).defaults(defaultOptions).toObject();\n};\n\nEngine.prototype.setWorld = function(world) {\n  this.world = world;\n};\n\nEngine.prototype.getWorld = function() {\n  return this.world;\n};\n\nEngine.prototype.run = function() {\n  if (this.running) {\n    return;\n  }\n  this.running = true;\n  this.step();\n};\n\nEngine.prototype.step = function() {\n  if (this.running) {\n    return;\n  }\n  this.step();\n};\n\nEngine.prototype.step = function() {\n  var world = this.world;\n  var options = this.options;\n  var timestep = options.timestep;\n  var entities = this.world.entities;\n  Lazy(entities.agents).each(function(agent) {\n    if (agent.selected) {\n      world.agentSelected = agent;\n      return;\n    }\n    agent.step(timestep);\n    if (options.onStep) {\n      options.onStep(world);\n    }\n  });\n  this.iterations++;\n  if (this.running) {\n    var that = this;\n    setTimeout(function() {\n      that.step();\n    }, timestep);\n  }\n};\n\nEngine.prototype.stop = function() {\n  if (!this.running) {\n    return;\n  }\n  this.running = false;\n};\nEngine.prototype.reset = function() {\n  this.iterations = 0;\n  this.running = false;\n  this.world.restore();\n};\n\nmodule.exports = Engine;\n","\nvar Entity = function() {\n  this.extra = {};\n};\n\nmodule.exports = Entity;\n","var Agent = require('./Agent');\nvar Entity = require('./Entity');\nvar Vec2 = require('./Vec2');\n\nvar Group = function(world, agentsNumber, initArea, options) {\n  Entity.call(this);\n  options = Lazy(options).defaults({\n    pos: function(area) {\n      var x = area[0][0] + Math.random() * (area[1][0] - area[0][0]);\n      var y = area[0][1] + Math.random() * (area[1][1] - area[0][1]);\n      return Vec2.fromValues(x, y);\n    },\n    size: function() {\n      return 5;\n    },\n    behavior: this.behaviorRandom,\n  }).toObject();\n  this.id = Group.id++;\n\n  this.behavior = options.behavior;\n  this.world = world;\n  var that = this;\n  this.agents = [];\n  for (var i=0;i<agentsNumber;i++) {\n    var pos = options.pos(initArea);\n    var size = isNaN(options.size) ? options.size() : options.size;\n    var agent = new Agent(that, pos[0], pos[1], size);\n    this.agents.push(agent);\n  }\n\n  if (options.waypoints) {\n    this.waypoints = options.waypoints;\n  }\n};\n\nGroup.prototype.addAgent = function(x,y) {\n  var size = isNaN(options.size) ? options.size() : options.size;\n  var agent = new Agent(this, x, y, size);\n  this.agents.push(agent);\n};\n\nGroup.prototype.getArea = function() {\n  return {\n    xmin: Lazy(this.agents).map(function(e) { return e.pos[0] - e.size; }).min(),\n    xmax: Lazy(this.agents).map(function(e) { return e.pos[0] + e.size; }).max(),\n    ymin: Lazy(this.agents).map(function(e) { return e.pos[1] - e.size; }).min(),\n    ymax: Lazy(this.agents).map(function(e) { return e.pos[1] + e.size; }).max()\n  };\n};\n\nGroup.prototype.addAgent = function(agent) {\n  this.agents.concat(agent);\n};\n\nGroup.prototype.behaviorRandom = function(agent, step) {\n  var accel = Vec2.fromValues(Math.random() * 2 - 1, Math.random() * 2 - 1);\n  var vel = Vec2.create();\n  var pos = Vec2.create();\n  Vec2.scale(vel,accel,step);\n  Vec2.add(agent.vel,agent.vel,vel);\n  //this.direction = Math.atan2(entity.vel.y, entity.vel.x);\n  Vec2.scale(pos,agent.vel,step);\n  Vec2.add(agent.pos,agent.pos,pos);\n\n  if (this.world.wrap) {\n    if (agent.pos[0] > this.world.MAX_X) {\n      agent.pos[0] = this.world.MIN_X + agent.pos[0] - world.MAX_X;\n    }\n    if (agent.pos[0] < this.world.MIN_X) {\n      agent.pos[0] = this.world.MAX_X - (this.world.MIN_X - entity.pos[0]);\n    }\n    if (agent.pos[1] > this.world.MAX_Y) {\n      agent.pos[1] = this.world.MIN_Y + entity.pos[1] - this.world.MAX_Y;\n    }\n    if (agent.pos[1] < this.world.MIN_Y) {\n      agent.pos[1] = this.world.MAX_Y - (this.world.MIN_Y - entity.pos[1]);\n    }\n  }\n};\n\nGroup.id = 0;\n\nmodule.exports = Group;\n","\nvar Colors = {\n  Agent: 0xFF0000,\n  Wall: 0x00FF00,\n  Group: 0xe1eca0,\n  Joint: 0xFFFFFF,\n  Waypoint: 0x7a7a7a\n};\n\n/*\n* Base render prototype\n*/\nvar Entity = function(entity, container, display) {\n  this.entitiyModel = entity;\n  this.entitiyModel.extra.view = this;\n  // add it the container so we see it on our screens..\n  display.interactive = true;\n  display.buttonMode = true;\n  display.mouseover = this.mouseover;\n  display.mouseout = this.mouseout;\n  display._entityView = this;\n  this.display = display;\n  container.addChild(this.display);\n};\n\nEntity.prototype.update = function() {\n  //this.display.clear();\n};\n\nEntity.prototype.mouseover = function() {\n  var entity = this._entityView.entityModel;\n  console.log(entity.id + ': Mouse Over');\n  agent.selected = true;\n};\n\nEntity.prototype.mouseout = function() {\n  this._entityView.entityModel.selected = false;\n};\n\nvar Agent = function(agent, container, options) {\n  var display = new PIXI.Graphics();\n  Entity.call(this, agent, container, display);\n  this.display.beginFill(Colors.Agent);\n  this.circle = new PIXI.Circle(agent.pos.x, agent.pos.y, agent.size);\n\n  this.update();\n};\n\nAgent.prototype.update = function() {\n  if (!Agent.show || !Agent.show.all) {\n    this.display.clear();\n    return;\n  }\n  Entity.prototype.update.call(this);\n\n  var e = this.entitiyModel;\n  // direction line\n  var scale = 10;\n  this.circle.x = e.pos[0];\n  this.circle.y = e.pos[1];\n\n  if (Agent.show.body) {\n    this.display.beginFill(Colors.Agent);\n    this.display.drawShape(this.circle);\n    this.display.lineStyle(1, Colors.Agent);\n  }\n  if (Agent.show.direction) {\n    this.display.moveTo(e.pos[0], e.pos[1]);\n    this.display.lineTo(e.pos[0] + e.vel[0] * scale, e.pos[1] + e.vel[1] * scale);\n    this.display.endFill();\n  }\n  //console.log(e);\n};\nAgent.show = {body: true, direction: true, all: true};\n\nvar AgentSprite = function(agent, container, texture) {\n  var sprite = new PIXI.Sprite(texture);\n  //var display = new PIXI.Sprite(options.texture);\n  Entity.call(this, agent, container, sprite);\n  this.display.visible = Agent.show.body;\n  this.display.anchor.set(0.5);\n  //this.display.alpha = 0.5;\n  this.display.height = agent.size;\n  this.display.width = agent.size;\n  this.display.x = agent.pos[0];\n  this.display.y = agent.pos[1];\n  this.update();\n};\n\nAgentSprite.prototype.update = function() {\n  if (!Agent.show || !Agent.show.all) {\n    return;\n  }\n  Entity.prototype.update.call(this);\n\n  var e = this.entitiyModel;\n  this.display.position.set(e.pos[0], e.pos[1]);\n  this.display.rotation = Math.atan2(e.vel[1], e.vel[0]) - Math.PI / 2;\n};\nAgentSprite.show = {body: true, direction: true, all: true};\n\nvar Wall = function(wall, container) {\n  var display = new PIXI.Graphics();\n  Entity.call(this, wall, container, display);\n  this.joints = [];\n  for (var j in wall.path) {\n    var joint = wall.path[j];\n    var circle = new PIXI.Circle(joint[0], joint[1], wall.width);\n    this.joints.push(circle);\n  }\n  this.update();\n};\n\nWall.prototype.update = function(options) {\n  if (!Wall.show || !Wall.show.all) {\n    this.display.clear();\n    return;\n  }\n  Entity.prototype.update.call(this);\n  //this.display.clear();\n  var path = wall.path;\n  if (Wall.show.path) {\n    //this.display.beginFill(Colors.Wall, 0.1);\n    this.display.lineStyle(wall.width, Colors.Wall);\n    this.display.moveTo(path[0][0], path[0][1]);\n    for (var i = 1; i < path.length ; i++) {\n      this.display.lineTo(path[i][0], path[i][1]);\n    }\n    //this.display.endFill();\n  }\n  if (Wall.show.corners) {\n    this.display.beginFill(Colors.Joint);\n    for (var j in this.joints) {\n      this.display.drawShape(this.joints[j]);\n    }\n    this.display.endFill();\n  }\n};\nWall.show = {path: true, corners: true, all: true};\n\nvar Group = function(group, container) {\n  var display = new PIXI.Graphics();\n  Entity.call(this, group, container, display);\n  this.area = new PIXI.Rectangle(0, 0, 0, 0);\n  var wps = group.waypoints;\n  if (wps) {\n    this.waypoints = [];\n    for (var i in wps) {\n      var wp = wps[i];\n      var circle = new PIXI.Circle(wp[0], wp[1], 1);\n      this.waypoints.push(circle);\n    }\n  }\n  this.update();\n};\n\nGroup.prototype.update = function(options) {\n  if (!Group.show || !Group.show.all) {\n    this.display.clear();\n    return;\n  }\n  this.display.clear();\n  Entity.prototype.update.call(this);\n  var group = this.entitiyModel;\n  if (!group.agents || group.agents.length === 0) {\n    return;\n  }\n  if (Group.show.area) {\n    var limits = group.getArea();\n    this.area.x = limits.xmin;\n    this.area.y = limits.ymin;\n    this.area.width = limits.xmax - limits.xmin;\n    this.area.height = limits.ymax - limits.ymin;\n\n    this.display.beginFill(Colors.Group, 0.2);\n    this.display.drawShape(this.area);\n    this.display.endFill();\n  }\n  var wps = this.waypoints;\n  if (Group.show.waypoints && wps) {\n    this.display.lineStyle(1, Colors.Group);\n    this.display.beginFill(Colors.Joint);\n    for (var i in wps) {\n      this.display.drawShape(wps[i]);\n    }\n    this.display.endFill();\n    //\n    this.display.moveTo(wps[0].x, wps[0].y);\n    for (var j = 1; j < wps.length; j++) {\n      this.display.lineTo(wps[j].x, wps[j].y);\n    }\n  }\n};\n\nGroup.show = {area: true, waypoints: true, all: true};\n\nmodule.exports.Agent = Agent;\nmodule.exports.AgentSprite = AgentSprite;\nmodule.exports.Wall = Wall;\nmodule.exports.Group = Group;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n/**\n * @class Common utilities\n * @name glMatrix\n */\nvar glMatrix = {};\n\n// Constants\nglMatrix.EPSILON = 0.000001;\nglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nglMatrix.RANDOM = Math.random;\nglMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE !== Array) && ('SIMD' in this);\nglMatrix.ENABLE_SIMD = false;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nglMatrix.setMatrixArrayType = function(type) {\n    glMatrix.ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} Angle in Degrees\n*/\nglMatrix.toRadian = function(a){\n     return a * degree;\n}\n\n/**\n * @class 2 Dimensional Vector\n * @name vec2\n */\nvar vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = 0;\n    out[1] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.fromValues = function(x, y) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x*x + y*y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n    scale = scale || 1.0;\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2d = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function() {\n    var vec = vec2.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 2;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n\n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1];\n        }\n\n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n};\n\nmodule.exports = vec2;\n","\nvar Entity = require('./Entity');\n\nvar Wall = function(path, options) {\n  Entity.call(this);\n  if (!path || path.length < 2) {\n    throw 'Walls must have at least two points';\n  }\n  this.width = this.options ? options.width || 2 : 2;\n  this.path = path;\n};\n\nmodule.exports = Wall;\n","/* global window,module, exports : true, define */\n\nvar World = function(x1, y1, x2, y2) {\n  this.entities = {\n    groups: [new CrowdSim.Group(this,0)],\n    agents: [],\n    walls: []\n  };\n  this.wrap = true;\n  this.x1 = x1;\n  this.y1 = y1;\n  this.x2 = x2;\n  this.y2 = y2;\n};\n\nWorld.prototype.getDefaultGroup = function() {\n  return this.entities.groups.first();\n};\n\nWorld.prototype.addGroup = function(group) {\n  this.entities.groups = this.entities.groups.concat(group);\n  this.entities.agents = this.entities.agents.concat(group.agents);\n};\n\nWorld.prototype.addWall = function(wall) {\n  this.entities.walls = this.entities.walls.concat(wall);\n};\n\nWorld.prototype.save = function() {\n  this.agentsSave = JSON.stringify(this.agents);\n};\nWorld.prototype.restore = function() {\n  this.entities.agents = JSON.parse(this.agentsSave);\n};\n\nmodule.exports = World;\n"]}
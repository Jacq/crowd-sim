{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/Agent.js","src/CrowdSim.js","src/Engine.js","src/Entity.js","src/Group.js","src/Render.js","src/Wall.js","src/World.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CrowdSim.js","sourceRoot":".","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* global window,module, exports : true, define */\r\nvar Entity = require('./Entity');\r\n\r\nvar Agent = function(x, y, size) {\r\n  Entity.call(this);\r\n\r\n  this.id = Agent.id++;\r\n  this.pos = {\r\n    x: x,\r\n    y: y\r\n  };\r\n  this.vel = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n  this.size = size;\r\n  this.waypoint = null;\r\n};\r\n\r\nAgent.prototype.step = function(world, step) {\r\n  if (this.waypoint) { // move by waypoint\r\n\r\n  }\r\n  var accel = {x: Math.random() * 2 - 1, y: Math.random() * 2 - 1};\r\n  this.vel.x += accel.x * step;\r\n  this.vel.y += accel.y * step;\r\n  //this.direction = Math.atan2(entity.vel.y, entity.vel.x);\r\n  this.pos.x += this.vel.x * step;\r\n  this.pos.y += this.vel.y * step;\r\n\r\n  if (world.wrap) {\r\n    if (this.pos.x > world.MAX_X) {\r\n      this.pos.x = world.MIN_X + this.pos.x - world.MAX_X;\r\n    }\r\n    if (this.pos.x < world.MIN_X) {\r\n      this.pos.x = world.MAX_X - (world.MIN_X - entity.pos.x);\r\n    }\r\n    if (this.pos.y > world.MAX_Y) {\r\n      this.pos.y = world.MIN_Y + entity.pos.y - world.MAX_Y;\r\n    }\r\n    if (this.pos.y < world.MIN_Y) {\r\n      this.pos.y = world.MAX_Y - (world.MIN_Y - entity.pos.y);\r\n    }\r\n  }\r\n};\r\nAgent.id = 0;\r\n\r\nmodule.exports = Agent;\r\n","/* global window,module, exports : true, define */\r\n\r\nvar CrowdSim = {\r\n  Agent: require('./Agent'),\r\n  Group: require('./Group'),\r\n  World: require('./World'),\r\n  Wall: require('./Wall'),\r\n  Engine: require('./Engine'),\r\n  Render: require('./Render')\r\n};\r\n\r\nmodule.exports = CrowdSim;\r\n\r\n// browser\r\nif (typeof window === 'object' && typeof window.document === 'object') {\r\n  window.CrowdSim = CrowdSim;\r\n}\r\n","\r\nvar Engine = function(world, options) {\r\n  this.running = false;\r\n  this.iterations = 0;\r\n  //this.agentsSave = JSON.parse(JSON.stringify(world.agents));\r\n  this.world = world || {};\r\n  this.world.save();\r\n\r\n  var defaultOptions = {\r\n    step: 0.1\r\n  };\r\n  this.options = Lazy(options).defaults(defaultOptions).toObject();\r\n};\r\n\r\nEngine.prototype.setWorld = function(world) {\r\n  this.world = world;\r\n};\r\n\r\nEngine.prototype.getWorld = function() {\r\n  return this.world;\r\n};\r\n\r\nEngine.prototype.run = function() {\r\n  if (this.running) {\r\n    return;\r\n  }\r\n  this.running = true;\r\n  this._step();\r\n};\r\n\r\nEngine.prototype.step = function() {\r\n  if (this.running) {\r\n    return;\r\n  }\r\n  this._step();\r\n};\r\n\r\nEngine.prototype._step = function() {\r\n  var world = this.world;\r\n  var options = this.options;\r\n  this.world.getAgents().each(function(agent) {\r\n    if (agent.selected) {\r\n      world.agentSelected = agent;\r\n      return;\r\n    }\r\n    agent.step(world,options.step);\r\n    if (options.onStep) {\r\n      options.onStep(world);\r\n    }\r\n  });\r\n  this.iterations++;\r\n  if (this.running) {\r\n    var that = this;\r\n    setTimeout(function() {\r\n      that._step();\r\n    }, this.STEP);\r\n  }\r\n};\r\n\r\nEngine.prototype.stop = function() {\r\n  if (!this.running) {\r\n    return;\r\n  }\r\n  this.running = false;\r\n};\r\nEngine.prototype.reset = function() {\r\n  this.iterations = 0;\r\n  this.running = false;\r\n  this.world.restore();\r\n};\r\n\r\nmodule.exports = Engine;\r\n","\nvar Entity = function() {\n  this.extra = {};\n};\n\nmodule.exports = Entity;\n","var Agent = require('./Agent');\nvar Entity = require('./Entity');\n\nvar Group = function(total, area, options) {\n  Entity.call(this);\n\n  options = Lazy(options).defaults({\n    pos: function(area) {\n      var x = area[0][0] + Math.random() * (area[1][0] - area[0][0]);\n      var y = area[0][1] + Math.random() * (area[1][1] - area[0][1]);\n      return [x, y];\n    },\n    size: function() {\n      return 5;\n    }\n  }).toObject();\n  this.id = Group.id++;\n\n  this.agents = Lazy.generate(function(e) {\n    var pos = options.pos(area);\n    var size = isNaN(options.size) ? options.size() : options.size;\n    return new Agent(pos[0], pos[1], size);\n  }, total).toArray();\n\n  if (options.waypoints) {\n    this.waypoints = options.waypoints;\n  }\n};\n\nGroup.prototype.addAgent = function(agent) {\n  this.agents.push(agent);\n};\n\nGroup.prototype.getArea = function() {\n  return {\n    xmin: Lazy(this.agents).map(function(e) { return e.pos.x - e.size; }).min(),\n    xmax: Lazy(this.agents).map(function(e) { return e.pos.x + e.size; }).max(),\n    ymin: Lazy(this.agents).map(function(e) { return e.pos.y - e.size; }).min(),\n    ymax: Lazy(this.agents).map(function(e) { return e.pos.y + e.size; }).max()\n  };\n};\n\nGroup.prototype.addAgent = function(agent) {\n  this.agents.concat(agent);\n};\n\nGroup.id = 0;\n\nmodule.exports = Group;\n","\r\nvar Colors = {\r\n  Agent: 0xFF0000,\r\n  Wall: 0x00FF00,\r\n  Group: 0xe1eca0,\r\n  Joint: 0xFFFFFF,\r\n  Waypoint: 0x7a7a7a\r\n};\r\n\r\n/*\r\n* Base render prototype\r\n*/\r\nvar Entity = function(entity, stage) {\r\n  this.entitiyModel = entity;\r\n  this.entitiyModel.extra.view = this;\r\n  this.graphics = new PIXI.Graphics();\r\n  // add it the stage so we see it on our screens..\r\n  this.graphics.interactive = true;\r\n  this.graphics.buttonMode = true;\r\n  this.graphics.mouseover = this.mouseover;\r\n  this.graphics.mouseout = this.mouseout;\r\n  this.graphics._entityView = this;\r\n  stage.addChild(this.graphics);\r\n};\r\n\r\nEntity.prototype.render = function() {\r\n  //this.graphics.clear();\r\n};\r\n\r\nEntity.prototype.mouseover = function() {\r\n  var entity = this._entityView.entityModel;\r\n  console.log(entity.id + ': Mouse Over');\r\n  agent.selected = true;\r\n};\r\n\r\nEntity.prototype.mouseout = function() {\r\n  this._entityView.entityModel.selected = false;\r\n};\r\n\r\nvar Agent = function(agent, stage) {\r\n  Entity.call(this, agent, stage);\r\n\r\n  this.graphics.beginFill(Colors.Agent);\r\n  this.circle = new PIXI.Circle(agent.pos.x, agent.pos.y, agent.size);\r\n  this.text = new PIXI.Text(agent.id, {font: '12px Arial', fill: 'yellow'});\r\n  this.text.pos = agent.pos;\r\n  this.text.anchor.x = 0.5;\r\n  this.text.anchor.y = 0.5;\r\n  this.render();\r\n};\r\n\r\nAgent.prototype.render = function() {\r\n  if (!Agent.show || !Agent.show.all) {\r\n    this.graphics.clear();\r\n    return;\r\n  }\r\n  Entity.prototype.render.call(this);\r\n  this.graphics.clear();\r\n  var e = this.entitiyModel;\r\n  // direction line\r\n  var scale = 10;\r\n  this.circle.x = e.pos.x;\r\n  this.circle.y = e.pos.y;\r\n\r\n  if (Agent.show.body) {\r\n    this.graphics.beginFill(Colors.Agent);\r\n    this.graphics.drawShape(this.circle);\r\n    this.graphics.lineStyle(1, Colors.Agent);\r\n  }\r\n  if (Agent.show.direction) {\r\n    this.graphics.moveTo(e.pos.x, e.pos.y);\r\n    this.graphics.lineTo(e.pos.x + e.vel.x * scale, e.pos.y + e.vel.y * scale);\r\n    this.graphics.endFill();\r\n  }\r\n  //console.log(e);\r\n};\r\nAgent.show = {body: true, direction: true, all: true};\r\n\r\nvar Wall = function(wall, stage) {\r\n  Entity.call(this, wall, stage);\r\n  this.joints = [];\r\n  for (var j in wall.path) {\r\n    var joint = wall.path[j];\r\n    var circle = new PIXI.Circle(joint[0], joint[1], wall.width);\r\n    this.joints.push(circle);\r\n  }\r\n  this.render();\r\n};\r\n\r\nWall.prototype.render = function(options) {\r\n  if (!Wall.show || !Wall.show.all) {\r\n    this.graphics.clear();\r\n    return;\r\n  }\r\n  Entity.prototype.render.call(this);\r\n  this.graphics.clear();\r\n  var path = wall.path;\r\n  if (Wall.show.path) {\r\n    this.graphics.beginFill(Colors.Wall, 0.2);\r\n    this.graphics.lineStyle(wall.width, Colors.Wall);\r\n    this.graphics.moveTo(path[0][0], path[0][1]);\r\n    for (var i = 1; i < path.length ; i++) {\r\n      this.graphics.lineTo(path[i][0], path[i][1]);\r\n    }\r\n    this.graphics.endFill();\r\n  }\r\n  if (Wall.show.corners) {\r\n    this.graphics.beginFill(Colors.Joint);\r\n    for (var j in this.joints) {\r\n      this.graphics.drawShape(this.joints[j]);\r\n    }\r\n    this.graphics.endFill();\r\n  }\r\n};\r\nWall.show = {path: true, corners: true, all: true};\r\n\r\nvar Group = function(group, stage) {\r\n  Entity.call(this, group, stage);\r\n  this.area = new PIXI.Rectangle(0, 0, 0, 0);\r\n  var wps = group.waypoints;\r\n  if (wps) {\r\n    this.waypoints = [];\r\n    for (var i in wps) {\r\n      var wp = wps[i];\r\n      var circle = new PIXI.Circle(wp[0], wp[1], 1);\r\n      this.waypoints.push(circle);\r\n    }\r\n  }\r\n  this.render();\r\n};\r\n\r\nGroup.prototype.render = function(options) {\r\n  if (!Group.show || !Group.show.all) {\r\n    this.graphics.clear();\r\n    return;\r\n  }\r\n  this.graphics.clear();\r\n  Entity.prototype.render.call(this);\r\n  var group = this.entitiyModel;\r\n  this.graphics.clear();\r\n  if (!group.agents || group.agents.length === 0) {\r\n    return;\r\n  }\r\n  if (Group.show.area) {\r\n    var limits = group.getArea();\r\n    this.area.x = limits.xmin;\r\n    this.area.y = limits.ymin;\r\n    this.area.width = limits.xmax - limits.xmin;\r\n    this.area.height = limits.ymax - limits.ymin;\r\n\r\n    this.graphics.beginFill(Colors.Group, 0.3);\r\n    this.graphics.drawShape(this.area);\r\n    this.graphics.endFill();\r\n  }\r\n  var wps = this.waypoints;\r\n  if (Group.show.waypoints && wps) {\r\n    this.graphics.lineStyle(1, Colors.Group);\r\n    this.graphics.beginFill(Colors.Joint);\r\n    for (var i in wps) {\r\n      this.graphics.drawShape(wps[i]);\r\n    }\r\n    this.graphics.endFill();\r\n    //\r\n    this.graphics.moveTo(wps[0].x, wps[0].y);\r\n    for (var j = 1; j < wps.length; j++) {\r\n      this.graphics.lineTo(wps[j].x, wps[j].y);\r\n    }\r\n  }\r\n};\r\n\r\nGroup.show = {area: true, waypoints: true, all: true};\r\n\r\nmodule.exports.Agent = Agent;\r\nmodule.exports.Wall = Wall;\r\nmodule.exports.Group = Group;\r\n","\nvar Entity = require('./Entity');\n\nvar Wall = function(path, options) {\n  Entity.call(this);\n  if (!path || path.length < 2) {\n    throw 'Walls must have at least two points';\n  }\n  this.width = this.options ? options.width || 2 : 2;\n  this.path = path;\n};\n\nmodule.exports = Wall;\n","/* global window,module, exports : true, define */\r\n\r\nvar World = function(x1, y1, x2, y2) {\r\n  this.groups = Lazy([new CrowdSim.Group(0)]);\r\n  this.walls = [];\r\n  this.wrap = true;\r\n  this.x1 = x1;\r\n  this.y1 = y1;\r\n  this.x2 = x2;\r\n  this.y2 = y2;\r\n};\r\n\r\nWorld.prototype.getDefaultGroup = function() {\r\n  return this.groups.first();\r\n};\r\n\r\nWorld.prototype.addGroup = function(group) {\r\n  this.groups = Lazy(this.groups).concat(group);\r\n};\r\n\r\nWorld.prototype.addWall = function(wall) {\r\n  this.walls = Lazy(this.walls).concat(wall);\r\n};\r\n\r\nWorld.prototype.save = function() {\r\n  this.agentsSave = JSON.stringify(this.agents);\r\n};\r\nWorld.prototype.restore = function() {\r\n  this.agents = JSON.parse(this.agentsSave);\r\n};\r\n\r\nWorld.prototype.getGroups = function() {\r\n  return Lazy(this.groups);\r\n};\r\n\r\nWorld.prototype.getAgents = function() {\r\n  return Lazy(this.groups).map(function(g) { return g.agents; }).flatten();\r\n};\r\n\r\nWorld.prototype.getWalls = function() {\r\n  return Lazy(this.walls);\r\n};\r\n\r\nmodule.exports = World;\r\n"]}
{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/sim/Agent.js","src/sim/Behavior/Behavior.js","src/sim/Behavior/Panic.js","src/sim/Common/Grid.js","src/sim/Common/Vec2.js","src/sim/Engine.js","src/sim/Entities/Context.js","src/sim/Entities/Entity.js","src/sim/Entities/Group.js","src/sim/Entities/Helpers/Joint.js","src/sim/Entities/Helpers/LinePrototype.js","src/sim/Entities/Helpers/Traits.js","src/sim/Entities/Path.js","src/sim/Entities/Wall.js","src/sim/World.js","src/sim/CrowdSim.js"],"names":[],"mappingsjjlmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACllPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjfile":"CrowdSim.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\r\n\r\nvar Vec2 = require('./Common/Vec2');\r\n\r\nvar Agent = function(x, y, group, options) {\r\n  var that = this;\r\n  this.id = Agent.id++;\r\n  // merge options with agent\r\n  Lazy(options).defaults(Agent.defaults).each(function(v, k) {\r\n    that[k] = v;\r\n  });\r\n  this.pos = Vec2.fromValues(x, y);\r\n  this.vel = Vec2.create();\r\n  this.group = group;\r\n  if (this.debug) {\r\n    this.debug = {};\r\n  }\r\n  if (this.path) {\r\n    this.followPath(this.path, this.pathStart);\r\n  }\r\n};\r\n\r\nAgent.prototype.getAspect = function() {\r\n  return this.aspect;\r\n};\r\n\r\nAgent.prototype.getRadius = function() {\r\n  return this.radius;\r\n};\r\n\r\nAgent.prototype.followPath = function(path, index) {\r\n  index = index || 0;\r\n  this.path = path;\r\n  if (path) {\r\n    this.pathStartIdx = index;\r\n    this._startPath();\r\n  } else {\r\n    this.target = null;\r\n    this.pathNextIdx = 0;\r\n  }\r\n};\r\n\r\nAgent.prototype._startPath = function() {\r\n  this.joints = this.path.getJoints();\r\n  if (this.group.isPathReverse()) {\r\n    this.target = this.joints[this.pathStartIdx];\r\n    this.pathNextIdx = this.pathStartIdx - 1;\r\n  } else {\r\n    this.target = this.joints[this.pathStartIdx];\r\n    this.pathNextIdx = this.pathStartIdx + 1;\r\n  }\r\n};\r\n\r\nAgent.prototype.step = function(stepSize) {\r\n  var accel = this.group.behavior.getAccel(this, this.target);\r\n\r\n  if (this.debug) {\r\n    if (accel && (isNaN(accel[0]) || isNaN(accel[1]))) {\r\n      throw 'Agent pos invalid';\r\n    }\r\n  }\r\n\r\n  this.move(accel, stepSize);\r\n  // update target to next if arrive at current\r\n  var last = false;\r\n  if (this.target) {\r\n    if (this.pathNextIdx && this.target.in(this.pos)) {\r\n      if (this.group.isPathReverse()) {\r\n        if (this.pathNextIdx >= 0) {\r\n          // follow to next waypoint\r\n          this.target = this.joints[this.pathNextIdx--];\r\n        } else {\r\n          last = true;\r\n        }\r\n      } else {\r\n        if (this.pathNextIdx < this.joints.length) {\r\n          // follow to next waypoint\r\n          this.target = this.joints[this.pathNextIdx++];\r\n        } else {\r\n          last = true;\r\n        }\r\n      }\r\n      if (last) { // last point check if is a circular path or end in endContext\r\n        if (this.group.isPathCircular()) {\r\n          this._startPath();\r\n        } else { // do one last trip for symetry to endContext if exists for symetry\r\n          var endContext = this.group.getEndContext();\r\n          if (endContext) {\r\n            this.target = endContext;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nAgent.prototype.move = function(accel, stepSize) {\r\n  /*if (Vec2.length(accel) > this.maxAccel) {\r\n    Vec2.normalizeAndScale(accel, accel, this.maxAccel);\r\n  }*/\r\n  Vec2.scaleAndAdd(this.vel, this.vel, accel, stepSize);\r\n\r\n  if (Vec2.length(this.vel) > this.maxVel) {\r\n    Vec2.normalizeAndScale(this.vel, this.vel, this.maxVel);\r\n  }\r\n\r\n  Vec2.scaleAndAdd(this.pos, this.pos, this.vel, stepSize * this.mobility);\r\n};\r\n\r\nAgent.defaults = {\r\n  aspect: 0xFFFFFF, // used for coloring\r\n  debug: false,\r\n  size: 0.5,\r\n  mass: 80e3,\r\n  mobility: 1.0,\r\n  maxAccel: 0.5, // m/s^2\r\n  maxVel: 1 // m/seg\r\n};\r\nAgent.id = 0;\r\nAgent.type = 'agent';\r\n\r\nmodule.exports = Agent;\r\n","'use strict';\n\n/**\n *\n *\n * @param  {World} world [description]\n * @param  {Object} options [description]\n * {Vec2}       [description]\n */\nvar Behavior = function(world) {\n  this.world = world;\n};\n\n// path point, point, other agent {point , radius}\nBehavior.prototype.getAccel = function(agent, target) {};\n\nmodule.exports = Behavior;\n","'use strict';\n\nvar Vec2 = require('../Common/Vec2');\nvar Behavior = require('./Behavior');\n\n/**\n * Helbing-Farkas,Vicsek Simulating dynamical features of escape panic\n *\n * @param  {World} world [description]\n * @param  {Object} options [description]\n * {Vec2}       [description]\n */\nvar Panic = function(world, options) {\n  Behavior.call(this, world);\n  this.options = Lazy(options).defaults(Panic.defaults).toObject();\n};\n\n// path point, point, other agent {point , with in. function}\nPanic.prototype.getAccel = function(agent, target) {\n  Behavior.prototype.getAccel.call(this, agent, target);\n  var desiredForce = Vec2.create();\n  var agentsForce = Vec2.create();\n  var wallsForce = Vec2.create();\n  var accel = Vec2.create();\n  var arrived;\n\n  // check agent desired force\n  Vec2.add(accel, agentsForce, wallsForce);\n  if (target) { // agent is going somewhere?\n    arrived = target.in(agent.pos);\n    if (!arrived) {\n      Vec2.subtract(desiredForce, target.pos, agent.pos);\n      if (Vec2.length(desiredForce) > agent.maxAccel) {\n        Vec2.normalizeAndScale(desiredForce, desiredForce, agent.maxAccel * agent.mass);\n      }\n    }\n  }\n\n  // check other agents interaction\n  var neighbours = this.world.getNeighbours(agent);\n  if (neighbours.length) {\n    for (var n in neighbours) {\n      var neighbour = neighbours[n];\n      if (neighbour !== agent) {\n        var neighbourToAgentForce = this.calculateAgentForce(agent, neighbour);\n        Vec2.add(agentsForce, agentsForce, neighbourToAgentForce);\n      }\n    }\n  }\n\n  // check walls interaction\n  var walls = this.world.getNearWalls(agent);\n  if (walls.length > 0) {\n    for (var w in walls) { // check all walls\n      var wall = walls[w];\n      for (var s = 0; s < wall.getJoints().length - 1; s++) { // check each segment of wall\n        var projection = wall.getProjection(agent.pos, s);\n        var wallsToAgentForce = this.calculateWallForce(agent, projection, wall.getWidth());\n        Vec2.add(wallsForce, wallsForce, wallsToAgentForce);\n      }\n    }\n  }\n\n  // fix to stay in place if no target is selected or already at target\n  if (!target || arrived) {\n    Vec2.negate(desiredForce, agent.vel);\n    Vec2.scale(desiredForce, desiredForce, this.options.relaxationTime);\n    if (Vec2.length(desiredForce) > agent.maxAccel) {\n      Vec2.normalizeAndScale(desiredForce, desiredForce, agent.maxAccel);\n    }\n  }\n\n  Vec2.add3(accel, desiredForce, agentsForce, wallsForce);\n  // return desiredForce + agentsForce + wallsForce;\n  if (agent.debug) {\n    if (isNaN(desiredForce[0]) || isNaN(agentsForce[0]) || isNaN(wallsForce[0]) ||\n        isNaN(desiredForce[1]) || isNaN(agentsForce[1]) || isNaN(wallsForce[1])) {\n      throw 'One of the forces is a NaN!';\n    }\n    agent.debug.forces = {\n      desired: desiredForce,\n      agents: agentsForce,\n      walls: wallsForce\n    };\n  }\n  //console.log(Vec2.str(desiredForce) + '|' + Vec2.str(agentsForce) + '|' + Vec2.str(wallsForce));\n  return accel;\n};\n\nPanic.prototype.calculateAgentForce = function(i, j) {\n  var interactionForce = Vec2.create();\n  var rij = i.size + j.size;\n  var dij = Vec2.distance(i.pos, j.pos);\n  // ij direction\n  var nijV2 = Vec2.create();\n  Vec2.subtract(nijV2, i.pos, j.pos);\n  Vec2.scale(nijV2, nijV2, 1 / dij);\n  // ij tangencial direction\n  var tijV2 = Vec2.fromValues(-nijV2[1], nijV2[0]);\n\n  var rdij = rij - dij;\n  Vec2.scale(interactionForce, nijV2, this.options.A * Math.exp(rdij / this.options.B));\n\n  if (rdij > 0) { // agents touch each other\n    // ij tangencial velocity\n    Vec2.scaleAndAdd(interactionForce, interactionForce, nijV2, this.options.kn * rdij); // body force\n    // sliding friction\n    var vjiV2 = Vec2.create();\n    Vec2.subtract(vjiV2, j.vel, i.vel);\n    var deltaVji = Vec2.dot(vjiV2, tijV2);\n    Vec2.scaleAndAdd(interactionForce, interactionForce, tijV2, this.options.Kv * rdij * deltaVji);\n  }\n  return interactionForce;\n};\n\nPanic.prototype.calculateWallForce = function(i, projection, width) {\n  var interactionForce = Vec2.create();\n  var rij = i.size + width;\n  // ij direction\n  var nijV2 = projection;\n  var dij = Vec2.length(projection);\n  Vec2.scale(nijV2, nijV2, 1 / dij);\n  // ij tangencial direction\n  var tijV2 = Vec2.fromValues(-nijV2[1], nijV2[0]);\n\n  var rdij = rij - dij;\n  Vec2.scale(interactionForce, nijV2, this.options.A * Math.exp(rdij / this.options.B));\n  if (rdij > 0) { // agents touch each other\n    // ij tangencial velocity\n    var vjiV2 = Vec2.create();\n    var dotViT = Vec2.dot(i.vel, tijV2);\n    Vec2.scaleAndAdd(interactionForce, interactionForce, nijV2, this.options.kn * rdij); // body force\n    Vec2.scaleAndAdd(interactionForce, interactionForce, tijV2, -this.options.Kv * rdij * dotViT);\n  }\n  return interactionForce;\n};\n\nPanic.defaults = {\n  A: 2e3, // N\n  B: 0.08, // m\n  kn: 1.2e5, // kg s-2\n  Kv: 2.4e5, //kg m-1 s-1\n  relaxationTime: 0.3\n};\nmodule.exports = Panic;\n","'use strict';\n\nvar Grid = function(near) {\n  this.near = near;\n  this.grid = {};\n};\n\nGrid.prototype.insert = function(entities) {\n  for (var i in entities) {\n    var entity = entities[i];\n    var key = this._key(entity);\n    if (this.grid.hasOwnProperty(key)) {\n      this.grid[key].push(entity);\n    } else {\n      this.grid[key] = [entity];\n    }\n  }\n};\n\nGrid.prototype.remove = function(entities) {\n  for (var i in entity) {\n    var entity = entities[i];\n    var key = this._key(entity);\n    var bucket = this.grid[key];\n    var j = bucket.indexOf(entity);\n    this.grid[key].splice(j, 1);\n  }\n};\n\nGrid.prototype.updateAll = function(entities) {\n  this.clear();\n  this.insert(entities);\n};\n\nGrid.prototype.update = function(entities) {\n  this.remove(entities);\n  this.insert(entities);\n};\n\nGrid.prototype.clear = function() {\n  this.grid = {};\n};\n\nGrid.prototype.in = function(entity, width, height) {\n  return this.neighbours(entity) ;\n};\n\nGrid.prototype.neighbours = function(entity) {\n  var o = this.near / 2;\n  var keys = this._keyNeighbours(entity);\n  var neighbours = [];\n  for (var k in keys) {\n    neighbours = neighbours.concat(this.grid[keys[k]]);\n  }\n  return neighbours.filter(function(e) { return e;});\n};\n\nGrid.prototype._keyNeighbours = function(entity) {\n  var x = Math.floor(entity.pos[0] / this.near) * this.near;\n  var y = Math.floor(entity.pos[1] / this.near) * this.near;\n  return [\n    (x - 1) + ':' + (y + 1), x + ':' + (y + 1), (x + 1) + ':' + (y + 1),\n    (x - 1) + ':' + y      , x + ':' + y      , (x + 1) + ':' + y,\n    (x - 1) + ':' + (y - 1), x + ':' + (y - 1), (x + 1) + ':' + (y - 1)\n  ];\n};\n\nGrid.prototype._key = function(entity) {\n  var x = Math.floor(entity.pos[0] / this.near) * this.near;\n  var y = Math.floor(entity.pos[1] / this.near) * this.near;\n  return x + ':' + y;\n};\n\nmodule.exports = Grid;\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\n/**\r\n * @class Common utilities\r\n * @name glMatrix\r\n */\r\nvar glMatrix = {};\r\n\r\n// Constants\r\nglMatrix.EPSILON = 0.000001;\r\nglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\r\nglMatrix.RANDOM = Math.random;\r\nglMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE !== Array) && ('SIMD' in this);\r\nglMatrix.ENABLE_SIMD = false;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nglMatrix.setMatrixArrayType = function(type) {\r\n    glMatrix.ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n* Convert Degree To Radian\r\n*\r\n* @param {Number} Angle in Degrees\r\n*/\r\nglMatrix.toRadian = function(a){\r\n     return a * degree;\r\n}\r\n\r\n/**\r\n * @class 2 Dimensional Vector\r\n * @name vec2\r\n */\r\nvar vec2 = {};\r\n\r\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\r\nvec2.create = function() {\r\n    var out = new glMatrix.ARRAY_TYPE(2);\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    return out;\r\n};\r\n\r\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\r\nvec2.clone = function(a) {\r\n    var out = new glMatrix.ARRAY_TYPE(2);\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\r\nvec2.fromValues = function(x, y) {\r\n    var out = new glMatrix.ARRAY_TYPE(2);\r\n    out[0] = x;\r\n    out[1] = y;\r\n    return out;\r\n};\r\n\r\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\r\nvec2.copy = function(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\r\nvec2.set = function(out, x, y) {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    return out;\r\n};\r\n\r\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nvec2.add = function(out, a, b) {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nvec2.subtract = function(out, a, b) {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\r\nvec2.sub = vec2.subtract;\r\n\r\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nvec2.multiply = function(out, a, b) {\r\n    out[0] = a[0] * b[0];\r\n    out[1] = a[1] * b[1];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\r\nvec2.mul = vec2.multiply;\r\n\r\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nvec2.divide = function(out, a, b) {\r\n    out[0] = a[0] / b[0];\r\n    out[1] = a[1] / b[1];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\r\nvec2.div = vec2.divide;\r\n\r\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nvec2.min = function(out, a, b) {\r\n    out[0] = Math.min(a[0], b[0]);\r\n    out[1] = Math.min(a[1], b[1]);\r\n    return out;\r\n};\r\n\r\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nvec2.max = function(out, a, b) {\r\n    out[0] = Math.max(a[0], b[0]);\r\n    out[1] = Math.max(a[1], b[1]);\r\n    return out;\r\n};\r\n\r\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\r\nvec2.scale = function(out, a, b) {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    return out;\r\n};\r\n\r\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\r\nvec2.scaleAndAdd = function(out, a, b, scale) {\r\n    out[0] = a[0] + (b[0] * scale);\r\n    out[1] = a[1] + (b[1] * scale);\r\n    return out;\r\n};\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nvec2.distance = function(a, b) {\r\n    var x = b[0] - a[0],\r\n        y = b[1] - a[1];\r\n    return Math.sqrt(x*x + y*y);\r\n};\r\n\r\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\r\nvec2.dist = vec2.distance;\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nvec2.squaredDistance = function(a, b) {\r\n    var x = b[0] - a[0],\r\n        y = b[1] - a[1];\r\n    return x*x + y*y;\r\n};\r\n\r\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\r\nvec2.sqrDist = vec2.squaredDistance;\r\n\r\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nvec2.length = function (a) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    return Math.sqrt(x*x + y*y);\r\n};\r\n\r\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\r\nvec2.len = vec2.length;\r\n\r\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nvec2.squaredLength = function (a) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    return x*x + y*y;\r\n};\r\n\r\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\r\nvec2.sqrLen = vec2.squaredLength;\r\n\r\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\nvec2.negate = function(out, a) {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\r\nvec2.inverse = function(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  return out;\r\n};\r\n\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\r\nvec2.normalize = function(out, a) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    var len = x*x + y*y;\r\n    if (len > 0) {\r\n        //TODO: evaluate use of glm_invsqrt here?\r\n        len = 1 / Math.sqrt(len);\r\n        out[0] = a[0] * len;\r\n        out[1] = a[1] * len;\r\n    }\r\n    return out;\r\n};\r\n\r\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nvec2.dot = function (a, b) {\r\n    return a[0] * b[0] + a[1] * b[1];\r\n};\r\n\r\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\r\nvec2.cross = function(out, a, b) {\r\n    var z = a[0] * b[1] - a[1] * b[0];\r\n    out[0] = out[1] = 0;\r\n    out[2] = z;\r\n    return out;\r\n};\r\n\r\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec2} out\r\n */\r\nvec2.lerp = function (out, a, b, t) {\r\n    var ax = a[0],\r\n        ay = a[1];\r\n    out[0] = ax + t * (b[0] - ax);\r\n    out[1] = ay + t * (b[1] - ay);\r\n    return out;\r\n};\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\r\nvec2.random = function (out, scale) {\r\n    scale = scale || 1.0;\r\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n    out[0] = Math.cos(r) * scale;\r\n    out[1] = Math.sin(r) * scale;\r\n    return out;\r\n};\r\n\r\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nvec2.transformMat2 = function(out, a, m) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    out[0] = m[0] * x + m[2] * y;\r\n    out[1] = m[1] * x + m[3] * y;\r\n    return out;\r\n};\r\n\r\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nvec2.transformMat2d = function(out, a, m) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    out[0] = m[0] * x + m[2] * y + m[4];\r\n    out[1] = m[1] * x + m[3] * y + m[5];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nvec2.transformMat3 = function(out, a, m) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    out[0] = m[0] * x + m[3] * y + m[6];\r\n    out[1] = m[1] * x + m[4] * y + m[7];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nvec2.transformMat4 = function(out, a, m) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    out[0] = m[0] * x + m[4] * y + m[12];\r\n    out[1] = m[1] * x + m[5] * y + m[13];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nvec2.forEach = (function() {\r\n    var vec = vec2.create();\r\n\r\n    return function(a, stride, offset, count, fn, arg) {\r\n        var i, l;\r\n        if(!stride) {\r\n            stride = 2;\r\n        }\r\n\r\n        if(!offset) {\r\n            offset = 0;\r\n        }\r\n\r\n        if(count) {\r\n            l = Math.min((count * stride) + offset, a.length);\r\n        } else {\r\n            l = a.length;\r\n        }\r\n\r\n        for(i = offset; i < l; i += stride) {\r\n            vec[0] = a[i]; vec[1] = a[i+1];\r\n            fn(vec, vec, arg);\r\n            a[i] = vec[0]; a[i+1] = vec[1];\r\n        }\r\n\r\n        return a;\r\n    };\r\n})();\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} vec vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nvec2.str = function (a) {\r\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\r\n};\r\n\r\nmodule.exports = vec2;\r\n\r\n/**\r\n * Adds three vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {vec2} c the third operand\r\n * @returns {vec2} out\r\n */\r\nvec2.add3 = function(out, a, b, c) {\r\n    out[0] = a[0] + b[0] + c[0];\r\n    out[1] = a[1] + b[1] + c[1];\r\n    return out;\r\n};\r\n\r\n/**\r\n * Calculates the shortest projection between a point and a line defined by two vec2's\r\n *\r\n * @param {vec2} p the point\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} projection between p and the line defined a and b\r\n */\r\nvec2.projectionToSegment = function(out, p, a, b) {\r\n  var l2 = vec2.squaredDistance(a, b);\r\n  if (l2 === 0) return vec2.subtract(out, p, a); // point to line of one point\r\n  // tangencial projection\r\n  var t = ((p[0] - a[0]) * (b[0] - a[0]) + (p[1] - a[1]) * (b[1] - a[1])) / l2;\r\n  if (t < 0) return vec2.subtract(out, p, a); // beyond a\r\n  if (t > 1) return vec2.subtract(out, p, b); // beyond b\r\n  // projection within a-b\r\n  vec2.lerp(out,a,b,t);\r\n  return vec2.subtract(out, p, out);\r\n};\r\n\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @param {Number} scale the amount to scale a by after normalize\r\n * @returns {vec2} out\r\n */\r\nvec2.normalizeAndScale = function(out, a, b) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    var len = x*x + y*y;\r\n    if (len > 0) {\r\n        //TODO: evaluate use of glm_invsqrt here?\r\n        len = b / Math.sqrt(len);\r\n        out[0] = a[0] * len;\r\n        out[1] = a[1] * len;\r\n    }\r\n    return out;\r\n};\r\n","'use strict';\r\n\r\n//var $ = jQuery =\r\n\r\nvar Engine = function(world, options) {\r\n  this.running = false;\r\n  this.iterations = 0;\r\n  //this.agentsSave = JSON.parse(JSON.stringify(world.agents));\r\n  this.world = world || {};\r\n  this.settings = Lazy(options).defaults(Engine.defaults).toObject();\r\n};\r\n\r\nEngine.prototype.getSettings = function() {\r\n  return this.settings;\r\n};\r\n\r\nEngine.prototype.setWorld = function(world) {\r\n  this.world = world;\r\n};\r\n\r\nEngine.prototype.getWorld = function() {\r\n  return this.world;\r\n};\r\n\r\nEngine.prototype.run = function() {\r\n  if (this.running) {\r\n    return;\r\n  }\r\n  this.running = true;\r\n  this._step();\r\n  return this.running;\r\n};\r\n\r\nEngine.prototype.step = function() {\r\n  if (this.running) {\r\n    this.stop();\r\n  }\r\n  this._step();\r\n  return this.running;\r\n};\r\n\r\nEngine.prototype._step = function() {\r\n  // calculate next execution\r\n  var startTime = new Date();\r\n  var opts = this.settings;\r\n  var timeStepSize = opts.timeStepSize;\r\n\r\n  this.world.step(timeStepSize);\r\n  this.iterations++;\r\n  if (this.onStep) {\r\n    this.onStep(this.world);\r\n  }\r\n\r\n  if (this.running) {\r\n    var that = this;\r\n    // using setTimeout instead of setInterval allows dinamycally changing timeStep while running\r\n    var endTime = new Date();\r\n    var timeToWait = (opts.timeStepRun * 1000) - (endTime - startTime);\r\n    timeToWait = timeToWait > 0 ? timeToWait : 0;\r\n    setTimeout(function() {\r\n      that._step();\r\n    }, timeToWait);\r\n  }\r\n};\r\n\r\nEngine.prototype.stop = function() {\r\n  if (!this.running) {\r\n    return;\r\n  }\r\n  this.running = false;\r\n  return this.running;\r\n};\r\n\r\nEngine.prototype.reset = function() {\r\n  var groups = this.world.getGroups();\r\n  Lazy(groups).each(function(g) {\r\n    g.emptyAgents();\r\n  });\r\n  this.stop();\r\n  this.iterations = 0;\r\n  return this.running;\r\n};\r\n\r\nEngine.defaults = {\r\n  timeStepSize: 0.2,\r\n  timeStepRun: 0.02\r\n};\r\n\r\nmodule.exports = Engine;\r\n","\r\nvar Entity = require('./Entity');\r\nvar Vec2 = require('../Common/Vec2');\r\nvar AssignableToGroup = require('./Helpers/Traits').AssignableToGroup;\r\n\r\nvar Context = function(x, y, parent, options, id) {\r\n  this.options = Lazy(options).defaults(Context.defaults).toObject();\r\n  this.id = id || 'C' + Context.id++;\r\n  Entity.call(this, x, y, parent, this.options);\r\n};\r\n\r\nContext.prototype.destroy = function() {\r\n  Entity.prototype.destroy.call(this);\r\n};\r\n\r\nContext.prototype.setArea = function(x, y) {\r\n  this.options.width = Math.abs(this.pos[0] - x) * 2;\r\n  this.options.height = Math.abs(this.pos[1] - y) * 2;\r\n};\r\n\r\nContext.prototype.incrSize = function(ds) {\r\n  this.options.width += ds;\r\n  this.options.height += ds;\r\n};\r\n\r\nContext.prototype.getWidth = function() {\r\n  return this.options.width;\r\n};\r\n\r\nContext.prototype.getHeight = function() {\r\n  return this.options.height;\r\n};\r\n\r\nContext.prototype.getRandomPoint = function() {\r\n  var x = this.pos[0] + (Math.random() - 0.5) * this.options.width;\r\n  var y = this.pos[1] + (Math.random() - 0.5) * this.options.height;\r\n  return Vec2.fromValues(x, y);\r\n};\r\n\r\nContext.prototype.in = function(pos) {\r\n  var w2 = this.options.width / 2;\r\n  var h2 = this.options.height / 2;\r\n  var isIn = (this.pos[0] - w2 < pos[0] && pos[0] < this.pos[0] + w2) &&\r\n             (this.pos[1] - h2 < pos[1] && pos[1] < this.pos[1] + h2);\r\n  return isIn;\r\n};\r\n\r\nContext.defaults = {\r\n  mobility: 1,\r\n  hazardLevel: 0,\r\n  width: 10,\r\n  height: 10\r\n};\r\nContext.type = 'context';\r\nContext = AssignableToGroup(Context);\r\nContext.id = 0;\r\nmodule.exports = Context;\r\n","var Vec2 = require('../Common/Vec2');\n\nvar Entity = function(x, y, parent, options) {\n  this.extra = {}; // for extra information, e.g. render object\n  this.pos = Vec2.fromValues(x, y);\n  this.entities = {}; // stores diferent structures with related entities\n  this.children = {}; // stores children entities\n  this.view = null; // to store references to render objects\n  if (parent) {\n    this.parent = parent;\n    // request add to parent the entity\n    this.parent.addEntity(this, options);\n  }\n};\n\nEntity.prototype.destroy = function() {\n  if (this.parent) {\n    // request to parent removal of entity\n    this.parent.removeEntity(this);\n  }\n};\n\nEntity.prototype.updatePos = function(x, y) {\n  this.pos[0] = x;\n  this.pos[1] = y;\n};\n\n// To add a children entity\nEntity.prototype.addEntity = function(joint) {};\n\n// To request remove of a children entity\nEntity.prototype.removeEntity = function(joint) {};\n\nmodule.exports = Entity;\n","'use strict';\r\n\r\nvar Entity = require('./Entity');\r\nvar Context = require('./Context');\r\nvar Path = require('./Path');\r\nvar Agent = require('../Agent');\r\nvar Vec2 = require('../Common/Vec2');\r\nvar Panic = require('../Behavior/Panic');\r\n\r\nvar Group = function(x, y, parent, options, id) {\r\n  this.options = Lazy(options).defaults(Group.defaults).toObject();\r\n  this.id = id || 'G' + Group.id++;\r\n  Entity.call(this, x, y, parent, this.options);\r\n  this.behavior = new Panic(this.parent);\r\n  this.agents = [];\r\n  this.agentsCount = this.options.agentsCount;\r\n  this.entities.path = null;\r\n  this.entities.startContext = null;\r\n  this.entities.endContext = null;\r\n};\r\n\r\nGroup.prototype.destroy = function() {\r\n  this.emptyAgents();\r\n  this.behavior = null;\r\n  if (this.entities.startContext) {\r\n    this.entities.startContext.unassignFromGroup(this);\r\n  }\r\n  if (this.entities.endContext) {\r\n    this.entities.endContext.unassignFromGroup(this);\r\n  }\r\n  Entity.prototype.destroy.call(this);\r\n};\r\n\r\nGroup.prototype.getRadius = function() {\r\n  return this.options.radius;\r\n};\r\n\r\nGroup.prototype.getStartContext = function() {\r\n  return this.entities.startContext;\r\n};\r\n\r\nGroup.prototype.assignStartContext = function(context) {\r\n  if (this.entities.startContext) {\r\n    this.entities.startContext.unassignFromGroup(this);\r\n  }\r\n  if (context) {\r\n    context.assignToGroup(this);\r\n  }\r\n  this.entities.startContext = context;\r\n};\r\n\r\nGroup.prototype.getEndContext = function() {\r\n  return this.entities.endContext;\r\n};\r\n\r\nGroup.prototype.assignEndContext = function(context) {\r\n  if (this.entities.endContext) {\r\n    this.entities.endContext.unassignFromGroup(this);\r\n  }\r\n  if (context) {\r\n    context.assignToGroup(this);\r\n  }\r\n  this.entities.endContext = context;\r\n};\r\n\r\nGroup.prototype.assignPath = function(path, idx) {\r\n  if (this.entities.path) {\r\n    this.entities.path.unassignFromGroup(this);\r\n  }\r\n  this.options.pathStart = idx || 0;\r\n  this.entities.path = path;\r\n  if (path) {\r\n    path.assignToGroup(this);\r\n    for (var i  in this.agents) {\r\n      this.agents[i].followPath(path, this.options.pathStart);\r\n    }\r\n  }\r\n};\r\n\r\nGroup.prototype.isPathReverse = function() {\r\n  return this.options.pathReverse;\r\n};\r\n\r\nGroup.prototype.isPathCircular = function() {\r\n  return this.options.pathCircular;\r\n};\r\n\r\nGroup.prototype.getPathStartIdx = function() {\r\n  return this.options.pathStart;\r\n};\r\n\r\nGroup.prototype.unAssign = function(entity) {\r\n  if (entity instanceof Context) {\r\n    if (this.entities.startContext === entity) {\r\n      this.entities.startContext = null;\r\n      entity.unassignFromGroup(this);\r\n    }\r\n    if (this.entities.endContext === entity) {\r\n      this.entities.endContext = null;\r\n      entity.unassignFromGroup(this);\r\n    }\r\n  } else if (entity instanceof Path) {\r\n    this.entities.path = null;\r\n    entity.unassignFromGroup(this);\r\n  } else {\r\n    throw 'Entity not assigned to group';\r\n  }\r\n};\r\n\r\nGroup.prototype.assignBehavior = function(behavior) {\r\n  this.behavior = behavior;\r\n};\r\n\r\nGroup.prototype.generateAgents = function(agentsCount, startContext) {\r\n  if (!startContext) {\r\n    startContext = this.entities.startContext;\r\n  }\r\n  // functions to set initial position\r\n  var newAgents = [];\r\n  var opts = this.options;\r\n  var pos = Vec2.create();\r\n  var radius = this.options.radius;\r\n  var initPos = this.pos;\r\n  function myInitPos(pos) {\r\n    Vec2.random(pos, radius);\r\n    Vec2.add(pos,pos, initPos);\r\n    return pos;\r\n  }\r\n  function myContextPos() {\r\n    return startContext.getRandomPoint();\r\n  }\r\n  var getInitPos = startContext ? myContextPos : myInitPos;\r\n  var numberToGenerate = Math.min(agentsCount, this.options.agentsMax);\r\n  // agent generation\r\n  for (var i = 0; i < numberToGenerate; i++) {\r\n    pos = getInitPos(pos);\r\n    var size = opts.agentsSizeMin;\r\n    if (opts.agentsSizeMin !== opts.agentsSizeMax) {\r\n      // random uniform distribution\r\n      size = opts.agentsSizeMin + Math.random() * (opts.agentsSizeMax - opts.agentsSizeMin);\r\n    }\r\n    var agent = new Agent(pos[0], pos[1], this, {\r\n      size: size,\r\n      debug: opts.debug,\r\n      path: this.entities.path,\r\n      aspect: this.options.aspect || Math.round(Math.random() * 0xFFFFFF),\r\n      pathStart: this.options.pathStart\r\n    });\r\n    //agent.followPath(this.entities.path, this.options.startIdx);\r\n    //agent.assignBehavior(behavior);\r\n    newAgents.push(agent);\r\n  }\r\n  return newAgents;\r\n};\r\n\r\nGroup.prototype.addAgents = function(agentsCount) {\r\n  var newAgents = this.generateAgents(agentsCount);\r\n  this.agents = this.agents.concat(newAgents);\r\n  this.parent.addAgents(newAgents);\r\n};\r\n\r\nGroup.prototype.emptyAgents = function() {\r\n  this.parent.removeAgents(this.agents);\r\n  this.agents.length = 0;\r\n};\r\n\r\nGroup.prototype.removeAgents = function(agents) {\r\n  for (var i in agents) {\r\n    var j = this.agents.indexOf(agents[i]);\r\n    this.agents.splice(j, 1);\r\n  }\r\n  this.parent.removeAgents(agents);\r\n};\r\n\r\nGroup.prototype.getPath = function() {\r\n  return this.entities.path;\r\n};\r\n\r\nGroup.prototype.getArea = function() {\r\n  return [\r\n    Vec2.fromValues(\r\n      Lazy(this.agents).map(function(e) { return e.pos[0] - e.size; }).min(),\r\n      Lazy(this.agents).map(function(e) { return e.pos[0] + e.size; }).max()\r\n    ),\r\n    Vec2.fromValues(\r\n      Lazy(this.agents).map(function(e) { return e.pos[1] - e.size; }).min(),\r\n      Lazy(this.agents).map(function(e) { return e.pos[1] + e.size; }).max()\r\n    )\r\n  ];\r\n};\r\n\r\nGroup.prototype.addAgent = function(agent) {\r\n  this.agents.push(agent);\r\n};\r\n\r\nGroup.prototype.step = function() {\r\n  if (this.agents.length === 0) {\r\n    this.addAgents(this.options.agentsCount);\r\n  }\r\n\r\n  if (this.options.startRate > 0 && this.options.startProb > 0 && this.agents.length < this.options.agentsMax) {\r\n    var probBirth = Math.random();\r\n    if (probBirth < this.options.startProb) {\r\n      var rate = this.options.startRate ;\r\n      if (rate + this.agents.length > this.options.agentsMax) {\r\n        // limit maximun agents\r\n        rate = this.options.agentsMax;\r\n      }\r\n      this.addAgents(rate);\r\n    }\r\n  }\r\n  if (this.entities.endContext) {\r\n    var agentsIn = this.parent.agentsInContext(this.entities.endContext, this.agents);\r\n    if (agentsIn.length > 0 && this.options.endRate > 0 && this.options.endProb > 0) {\r\n      var probDie = Math.random();\r\n      if (probDie < this.options.endProb) {\r\n        this.removeAgents(agentsIn);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nGroup.defaults = {\r\n  agentsAspect: 0, // used for colors\r\n  agentsSizeMin: 0.5,\r\n  agentsSizeMax: 0.5,\r\n  agentsCount: 10,\r\n  agentsMax: 100,\r\n  debug: false,\r\n  pathStart: 0,\r\n  pathReverse: false,\r\n  pathCircular: false,\r\n  radius: 3, // used when no start context is associated\r\n  startProb: 0, // Adds agents per step in startContext\r\n  startRate: 0, // Adds agents probability per step in startContext\r\n  endProb: 0, // Removes agents per step in endContext\r\n  endRate: 0 // Removes agents probability per step in endContext\r\n};\r\nGroup.id = 0;\r\nGroup.type = 'group';\r\n\r\nmodule.exports = Group;\r\n","var Entity = require('../Entity');\nvar Vec2 = require('../../Common/Vec2');\n\nvar Joint = function(x, y, parent, options, id) {\n  this.options = Lazy(options).defaults(Joint.defaults).toObject();\n  Entity.call(this, x, y, parent, this.options);\n  delete this.options.previousJoint; // delete not neccesary\n  this.id = id || 'J' + Joint.id++;\n};\n\nJoint.prototype.destroy = function() {\n  if (this.parent) {\n    this.parent.removeEntity(this);\n  }\n};\n\nJoint.prototype.getRadius = function() {\n  return this.options.radius;\n};\n\nJoint.prototype.in = function(pos) {\n  var dist = Vec2.distance(pos, this.pos);\n  return dist < this.options.radius;\n};\n\nJoint.prototype.setRadius = function(radius) {\n  if (this.options.scalable) {\n    this.options.radius = radius;\n  }\n};\n\nJoint.prototype.incrRadius = function(dr) {\n  if (this.options.scalable) {\n    this.options.radius += dr;\n  }\n};\n\nJoint.defaults = {\n  radius: 4,\n  previousJoint: null,\n  scalable: true\n};\nJoint.id = 0;\nJoint.type = 'joint';\n\nmodule.exports = Joint;\n","'use strict';\n\nvar Vec2 = require('../../Common/Vec2');\nvar Entity = require('../Entity');\nvar Joint = require('./Joint');\n\nvar LinePrototype = function(idPrefix, type, defaults, id) {\n  var Line = function(x, y, parent, options, id) {\n    this.options = Lazy(options).defaults(defaults).toObject();\n    this.id = id || idPrefix + Line.id++;\n    Entity.call(this, x, y, parent, this.options);\n    this.children.joints = [];\n    if (x && y) {\n      this.addJoint(x,y,this.options);\n    }\n  };\n\n  Line.prototype.destroy = function() {\n    for (var j in this.children.joints) {\n      this.children.joints[j].parent = null;\n      this.children.joints[j].destroy();\n    }\n    this.children.joints.length = 0;\n    Entity.prototype.destroy.call(this);\n  };\n\n  Line.prototype.addEntity = function(joint, options) {\n    // add a joint to the end or a given position by options.idx\n    if (!options || options.previousJoint === null) {\n      this.children.joints.push(joint);\n    } else {\n      var idx = this.children.joints.indexOf(options.previousJoint);\n      if (idx === -1) { throw 'Previous joint not found'; }\n      this.children.joints.splice(idx, 0, joint);\n    }\n  };\n\n  Line.prototype.removeEntity = function(joint) {\n    var idx = this.children.joints.indexOf(joint);\n    if (idx !== -1) {\n      this.children.joints.splice(idx, 1);\n      // destroy line if not contains joints\n      if (this.children.joints.length === 0) {\n        this.destroy();\n      } else if (idx === 0 && this.children.joints.length !== 0) { // relocate reference to next joint idx +1,\n        //but we removed idx alreade so next is idx\n        var nextJoint = this.children.joints[idx];\n        this.pos[0] = nextJoint.pos[0];\n        this.pos[1] = nextJoint.pos[1];\n      }\n    } else {\n      throw 'Joint not found in ' + Line.type;\n    }\n  };\n\n  Line.prototype.addJoints = function(joints) {\n    // n joints, n-1 sections\n    for (var i in joints) {\n      var joint = joints[i];\n      var radius = this.options.radius;\n      var options = Lazy(options).defaults(defaults).toObject();\n      if (joint.length === 2) {\n        options.radius = joint[3];\n      }\n      this.addJoint(joint[0],joint[1],options);\n    }\n  };\n\n  Line.prototype.addJoint = function(x, y, options, id) {\n    Entity.prototype.updatePos.call(this,x,y);\n    options = Lazy(options).defaults(defaults).toObject();\n    var joint = new Joint(x, y, this, options, id);\n    return joint;\n  };\n\n  Line.prototype.getJoints = function() {\n    return this.children.joints;\n  };\n\n  Line.prototype.getJointIdx = function(joint) {\n    return this.children.joints.indexOf(joint);\n  };\n\n  Line.prototype.getJointByIdx = function(idx) {\n    return this.children.joints[idx];\n  };\n\n  Line.prototype.getWidth = function() {\n    return this.options.width;\n  };\n\n  Line.prototype.reverse = function() {\n    this.children.joints = Lazy(this.children.joints).reverse().toArray();\n  };\n\n  Line.prototype.getProjection = function(point, segment) {\n    if (segment < 0 || segment >= this.children.joints.length - 1) {\n      throw 'Segment out of bounds';\n    }\n    var projection = Vec2.create();\n    return Vec2.projectionToSegment(projection, point, this.children.joints[segment].pos, this.children.joints[segment + 1].pos);\n  };\n\n  Line.id = 0;\n  Line.type = type;\n  return Line;\n};\n\nmodule.exports = LinePrototype;\n","\n\nvar AssignableToGroup = function(EntityPrototype) {\n\n  var oldConstruct = EntityPrototype.prototype;\n  var oldDestroy = EntityPrototype.prototype.destroy;\n\n  EntityPrototype = function(x, y, parent, options, id) {\n    oldConstruct.constructor.call(this,x, y, parent, options, id);\n    this.entities.groups = [];\n  };\n  EntityPrototype.prototype = oldConstruct;\n\n  EntityPrototype.prototype.destroy = function() {\n    // additionally unAssignFromGroup\n    for (var g in this.entities.groups) {\n      this.entities.groups[g].unAssign(this);\n    }\n    this.entities.groups.length = 0;\n    // call original destroy\n    return oldDestroy.call(this);\n  };\n\n  EntityPrototype.prototype.assignToGroup = function(entity) {\n    var idx = this.entities.groups.indexOf(entity);\n    if (idx > -1) {\n      throw 'Entity already associated';\n    } else {\n      this.entities.groups.push(entity);\n    }\n  };\n\n  EntityPrototype.prototype.unassignFromGroup = function(group) {\n    var idx = this.entities.groups.indexOf(group);\n    if (idx > -1) {\n      this.entities.groups.splice(idx, 1);\n    } else {\n      throw 'Entity not associated';\n    }\n  };\n\n  EntityPrototype.prototype.getAssignedGroups = function() {\n    return this.entities.groups;\n  };\n\n  return EntityPrototype;\n};\n\nmodule.exports.AssignableToGroup = AssignableToGroup;\n","'use strict';\n\nvar LinePrototype = require('./Helpers/LinePrototype');\nvar AssignableToGroup = require('./Helpers/Traits').AssignableToGroup;\n\nvar Path = LinePrototype('P','path',{\n  width: 0.2,\n  radius: 4\n});\n\nPath.defaults = {\n  width: 0.2,\n  radius: 4\n};\nPath.id = 0;\nPath = AssignableToGroup(Path);\nmodule.exports = Path;\n","\n\nvar LinePrototype = require('./Helpers/LinePrototype');\n\nvar Wall = LinePrototype('W','wall',{\n  width: 0.2,\n  radius: 1,\n  scalable: false\n});\nWall.id = 0;\n\nmodule.exports = Wall;\n","'use strict';\r\n\r\nvar Context = require('./Entities/Context');\r\nvar Group = require('./Entities/Group');\r\nvar Path = require('./Entities/Path');\r\nvar Wall = require('./Entities/Wall');\r\nvar Grid = require('./Common/Grid');\r\n\r\nvar World = function(parent, options) {\r\n  this.options = Lazy(options).defaults(World.defaults).toObject();\r\n  var that = this;\r\n  this.parent = parent;\r\n  this.agents = [];\r\n\r\n  this.entities = {\r\n    contexts: [],\r\n    groups: [],\r\n    paths: [],\r\n    walls: []\r\n  };\r\n  this.grid = new Grid(this.options.near);\r\n};\r\n\r\nWorld.prototype.getDefaultGroup = function() {\r\n  return this.entities.groups[0];\r\n};\r\n\r\nWorld.prototype.getAgents = function() {\r\n  return this.agents;\r\n};\r\n\r\nWorld.prototype.getEntitiesIterator = function() {\r\n  return Lazy(this.entities).values().flatten();\r\n};\r\n\r\nWorld.prototype.getContexts = function() {\r\n  return this.entities.contexts;\r\n};\r\n\r\nWorld.prototype.getGroups = function() {\r\n  return this.entities.groups;\r\n};\r\n\r\nWorld.prototype.getPaths = function() {\r\n  return this.entities.paths;\r\n};\r\n\r\nWorld.prototype.getWalls = function() {\r\n  return this.entities.walls;\r\n};\r\n\r\nWorld.prototype.addAgents = function(agents) {\r\n  this.agents = this.agents.concat(agents);\r\n  this.grid.insert(agents);\r\n  if (this.options.onCreateAgents) {\r\n    this.options.onCreateAgents(agents);\r\n  }\r\n};\r\n\r\nWorld.prototype.removeAgents = function(agents) {\r\n  for (var i in agents) {\r\n    var j = this.agents.indexOf(agents[i]);\r\n    this.agents.splice(j, 1);\r\n  }\r\n  this.grid.remove(agents);\r\n  if (this.options.onDestroyAgents) {\r\n    this.options.onDestroyAgents(agents);\r\n  }\r\n};\r\n\r\nWorld.prototype._onCreate = function(entity) {\r\n  if (this.options.onCreateEntity) {\r\n    this.options.onCreateEntity(entity);\r\n  }\r\n};\r\n\r\nWorld.prototype._onDestroy = function(entity) {\r\n  if (this.options.onDestroyEntity) {\r\n    this.options.onDestroyEntity(entity);\r\n  }\r\n};\r\n\r\nWorld.prototype._getEntityList = function(entity) {\r\n  if (entity instanceof Context) { // is context\r\n    return this.entities.contexts;\r\n  } else if (entity instanceof Group) { // is group\r\n    return this.entities.groups;\r\n  } else if (entity instanceof Path) { // is path\r\n    return this.entities.paths;\r\n  } else if (entity instanceof Wall) { // is wall\r\n    return this.entities.walls;\r\n  } else {\r\n    throw 'Entity object is not context, group, wall or path';\r\n  }\r\n};\r\n\r\nWorld.prototype.removeEntity = function(entity) {\r\n  var entityList = this._getEntityList(entity);\r\n  var idx = entityList.indexOf(entity);\r\n  if (idx !== -1) {\r\n    entityList.splice(idx, 1);\r\n    this._onDestroy(entity);\r\n  }\r\n};\r\n\r\nWorld.prototype.addEntity = function(entity) {\r\n  var entityList = this._getEntityList(entity);\r\n  entityList.push(entity);\r\n  this._onCreate(entity);\r\n};\r\n\r\nWorld.prototype.addContext = function(context) {\r\n  this.entities.contexts.push(context);\r\n  this._onCreate(context);\r\n};\r\n\r\nWorld.prototype.addGroup = function(group) {\r\n  this.entities.groups.push(group);\r\n  this._onCreate(group);\r\n};\r\n\r\nWorld.prototype.addPath = function(path) {\r\n  this.entities.paths.push(path);\r\n  this._onCreate(path);\r\n};\r\n\r\nWorld.prototype.addWall = function(wall) {\r\n  this.entities.walls.push(wall);\r\n  this._onCreate(wall);\r\n};\r\n\r\nWorld.prototype.getEntityById = function(id) {\r\n  return Lazy(this.entities).values().flatten().findWhere({id: id});\r\n};\r\n\r\nWorld.prototype.getContextById = function(id) {\r\n  return Lazy(this.entities.contexts).findWhere({id: id});\r\n};\r\n\r\nWorld.prototype.getPathById = function(id) {\r\n  return Lazy(this.entities.paths).findWhere({id: id});\r\n};\r\n\r\nWorld.prototype.getNeighbours = function(agent) {\r\n  return this.grid.neighbours(agent);\r\n};\r\n\r\n// TODO add spatial structure to optimize this function\r\nWorld.prototype.getNearWalls = function(agent) {\r\n  return this.entities.walls;\r\n};\r\n\r\n// TODO add spatial structure to optimize this function\r\nWorld.prototype.agentsInContext = function(context, agents) {\r\n  if (!agents) {\r\n    agents = this.agents;\r\n  }\r\n  agents = this.grid.in(context);\r\n  var agentsIn = [];\r\n  for (var i in agents) {\r\n    var agent = agents[i];\r\n    if (context.in(agent.pos)) {\r\n      agentsIn.push(agent);\r\n    }\r\n  }\r\n  return agentsIn;\r\n};\r\n\r\nWorld.prototype._saveHelper = function(o) {\r\n  var ignore = ['view', 'extra', 'agents', 'parent'];\r\n  var cache = [];\r\n  var result = JSON.stringify(o, function(key, value) {\r\n    if (ignore.indexOf(key) !== -1) { return; }\r\n    if (key === 'entities') {\r\n      var entities = {};\r\n      // map entities to array of ids\r\n      for (var prop in value) {\r\n        entities[prop] = value[prop].id;\r\n      }\r\n      return entities;\r\n    }\r\n    if (typeof value === 'object' && value !== null) {\r\n      if (cache.indexOf(value) !== -1) {\r\n        // Circular reference found, discard key\r\n        throw 'Circular reference found!';\r\n      }\r\n      // Store value in our collection\r\n      cache.push(value);\r\n    }\r\n    return value;\r\n  }, 2);\r\n  return result;\r\n};\r\n\r\nWorld.prototype.save = function(save) {\r\n  var raw = this._saveHelper(this.entities);\r\n  if (save) {\r\n    this.entitiesSave = raw;\r\n  } else {\r\n    console.log(raw);\r\n    return raw;\r\n  }\r\n};\r\n\r\nWorld.prototype.load = function(loader, loadDefault) {\r\n  if (!loader) {\r\n    // snapshoot load\r\n    if (loadDefault && this.entitiesSave) {\r\n      loader = this.entitiesSave;\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  if (typeof(loader) === 'function') {\r\n    // try function loader\r\n    loader(this);\r\n  } else {\r\n    // loader of raw JSON strings\r\n    if (typeof(loader) === 'string') {\r\n      loader = JSON.parse(loader);\r\n    }\r\n    var world = this;\r\n    // check if its json data\r\n    // entites are arred to world passing its reference\r\n\r\n    Lazy(loader.walls).each(function(e) {\r\n      var joints = e.children.joints;\r\n      var pos = e.children.joints ? [null, null] : e.pos; // to avoid duplicate init\r\n      var wall = new Wall(pos[0], pos[1], world, e.options, e.id);\r\n      Lazy(joints).each(function(j) {\r\n        wall.addJoint(j.pos[0], j.pos[1], j.options, j.id);\r\n      });\r\n    });\r\n    Lazy(loader.paths).each(function(e) {\r\n      var joints = e.children.joints;\r\n      var pos = e.children.joints ? [null, null] : e.pos; // to avoid duplicates init\r\n      var path = new Path(pos[0], pos[1], world, e.options, e.id);\r\n      Lazy(joints).each(function(j) {\r\n        path.addJoint(j.pos[0], j.pos[1], j.options, j.id);\r\n      });\r\n    });\r\n    Lazy(loader.contexts).each(function(e) {\r\n      new Context(e.pos[0], e.pos[1], world, e.options, e.id);\r\n    });\r\n    Lazy(loader.groups).each(function(e) {\r\n      var g = new Group(e.pos[0], e.pos[1], world, e.options, e.id);\r\n      if (e.entities.startContext) {\r\n        var startContext = world.getContextById(e.entities.startContext);\r\n        g.assignStartContext(startContext);\r\n      }\r\n      if (e.entities.endContext) {\r\n        var endContext = world.getContextById(e.entities.endContext);\r\n        g.assignEndContext(endContext);\r\n      }\r\n      if (e.entities.path) {\r\n        var path = world.getPathById(e.entities.path);\r\n        g.assignPath(path);\r\n      }\r\n      // TODO assign behavior\r\n    });\r\n  }\r\n};\r\n\r\nWorld.prototype.step = function(stepSize) {\r\n  this.grid.updateAll(this.agents);\r\n\r\n  Lazy(this.agents).each(function(agent) {\r\n    agent.step(stepSize);\r\n  });\r\n  Lazy(this.entities.groups).each(function(group) {\r\n    group.step(stepSize);\r\n  });\r\n};\r\n\r\nWorld.defaults = {\r\n  near: 10,\r\n  width: null,\r\n  height: null,\r\n  onCreateAgents: null,\r\n  onDestroyAgents: null,\r\n  onCreateEntity: null,\r\n  onDestroyEntity: null\r\n};\r\nmodule.exports = World;\r\n","/* global window,module, exports : true, define */\r\n\r\nvar CrowdSim = {\r\n  Agent: require('./Agent'),\r\n  Entity: require('./Entities/Entity'),\r\n  Context: require('./Entities/Context'),\r\n  Wall: require('./Entities/Wall'),\r\n  Path: require('./Entities/Path'),\r\n  Group: require('./Entities/Group'),\r\n  Joint: require('./Entities/Helpers/Joint'),\r\n  World: require('./World'),\r\n  Engine: require('./Engine'),\r\n  Vec2: require('./Common/Vec2')\r\n};\r\n\r\nCrowdSim.restartIds = function() {\r\n  CrowdSim.Agent.id = 0;\r\n  CrowdSim.Context.id = 0;\r\n  CrowdSim.Group.id = 0;\r\n  CrowdSim.Path.id = 0;\r\n  CrowdSim.Wall.id = 0;\r\n  CrowdSim.Joint.id = 0;\r\n};\r\n\r\nmodule.exports = CrowdSim;\r\n\r\n// browser\r\nif (typeof window === 'object' && typeof window.document === 'object') {\r\n  window.CrowdSim = CrowdSim;\r\n}\r\n"]}